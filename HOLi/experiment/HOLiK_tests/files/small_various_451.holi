# set-bounds 5 1 #
import syscall :(int -> unit)
import send :(int -> unit)
import getInput :(unit -> int)
import userExec :((unit -> unit) -> unit)
import getUser :(unit -> int)
import get_ext :(unit -> int)
import set_ext :(int -> unit)
import f2 :(unit -> unit)

int a1 := 0;
int b1 := 0;
int a2 := 0;
int b2 := 0;
int c2 := 0;
int d2 := 0;
int a3 := 0;
int balance1  := 100;
int bonus1    := 1;
int address   := 0;
int address2  := 0;
int addr      := 0;
int address4  := 0;
int addr5     := 0;
int lock      := 0; 
int readMAX   := 3;
int read_only := 100;
int is_open   := 0;
fun list      := empty;
int cnt       := 0;
int running   := 0;
int is_open2  := 0;
int secret    := 0;
int funds     := 100;
int total     := 100;
int balance2  := 100;
int wallet    := 0;
int userID    := 42;
int balance3  := 100;
int param3    := 50;
int local     := 0;
int remote    := 0;
int error     := 0;
int local2    := 0;
int remote2   := 0;
int error2    := 0;
int tmp       := -1;
int seats_remaining := 10;
int x       := 0;
int x2      := 0;
int reached := 0;
int x3      := 0;

//reentrancy 2
//------------
public withdraw2 (m:int) :(unit) = {
  if ((m - 1) < !balance2)
  then if (!userID == (getUser()))
       then wallet  := !wallet  + m;
            balance2 := !balance2 - m;
            assert(-1 < !balance2)
       else ()
  else ()};

//reentrancy param
//----------------
public withdraw3 (m:int) :(unit) = {
  if ((m - 1) < !param3)
  then send(m);
       balance := !balance3 - m;
       assert(not(!balance3 < 0))
  else ()};

//remote sync 1
//-------------
public remoteUpdate (u:unit) :(unit) = {
  let tmpx = !local in
  remoteSet(tmpx);
  assert(if !error then 1 else tmpx == remoteGet())
};

public localUpdate (i:int) :(unit) = {
  local := i
};

private remoteSet (i:int) :(unit) = {
  remote := i;
  set_ext(i)
};

private remoteGet (u:unit) :(int) = {
  let tmpx = get_ext() in
  if not(tmpx == !remote)
  then error := 1; tmpx
  else tmpx
};

//remote sync 2
//-------------
public updateRemote2 (u:unit) :(unit) = {
  let tmpx = !local2 in
  remote2 := tmpx;
  tmp := getRemote2();
  assert(if !error2 then 1 else (!tmp == tmpx))
};

public updateLocal2 (i:int) :(unit) = {
  local2 := i
};

private getRemote2 (u:unit) :(int) = {
  let tmpx = get_ext() in
  if tmpx == !remote2
  then tmpx
  else error2 := 1; tmpx
};

//reservation
//-----------
public reserve (x:int) :(unit) = {
  if (x - 1) < !seats_remaining
  then send_confirmation();
       seats_remaining := !seats_remaining - x;
       assert(0 < (!seats_remaining + 1))
  else ()
};
