# set-bounds 5 1 #
import syscall :(int -> unit)
import send :(int -> unit)
import getInput :(unit -> int)
import userExec :((unit -> unit) -> unit)
import getUser :(unit -> int)
import get_ext :(unit -> int)
import set_ext :(int -> unit)
import f2 :(unit -> unit)

int a1 := 0;
int b1 := 0;
int a2 := 0;
int b2 := 0;
int c2 := 0;
int d2 := 0;
int a3 := 0;
int balance1  := 100;
int bonus1    := 1;
int address   := 0;
int address2  := 0;
int addr      := 0;
int address4  := 0;
int addr5     := 0;
int lock      := 0; 
int readMAX   := 3;
int read_only := 100;
int is_open   := 0;
fun list      := empty;
int cnt       := 0;
int running   := 0;
int is_open2  := 0;
int secret    := 0;
int funds     := 100;
int total     := 100;
int balance2  := 100;
int wallet    := 0;
int userID    := 42;
int balance3  := 100;
int param3    := 50;
int local     := 0;
int remote    := 0;
int error     := 0;
int local2    := 0;
int remote2   := 0;
int error2    := 0;
int tmp       := -1;
int seats_remaining := 10;
int x       := 0;
int x2      := 0;
int reached := 0;
int x3      := 0;

//file lock param
//---------------
public read5 (u:unit) :(unit) = {
  readMAX := !readMAX - 1;
  assert(0 < !readMAX)
};

//file write
//----------
private openFile2 (u:unit) :(unit) = {
  is_open := 1
};

private closeFile (u:unit) :(unit) = {
  is_open := 0
};

//opponent shouldn't write since file is not open
public write (i:int) :(unit) = {
  if !is_open
  then read_only := i
  else ()
};

//opponent abuses this to open file so they can write
public read6 (u:unit) :(unit) = {
  openFile2();
  (let secret = !read_only in
  send(secret);
  closeFile();
  assert((!read_only) == secret))
};

//flat combiner
//-------------
private empty (x:int) :(unit) = { () };

public enlist (f: unit -> unit) :(unit) = {
   if (!running) then ()
   else 
       cnt := !cnt + 1;
       (let c = !cnt in
        let l = !list in 
        list := 
         (fun (z:int) :(unit) -> 
         (if (z == c) then f() else l(z))))
};

public run3(x:unit) :(unit) = {
   running := 1;
   if (0 < !cnt) then 
      (!list)(!cnt);
      cnt := !cnt - 1;
      assert(not (!cnt < 0));
      run3()
   else (list := empty; running := 0)       
};

//read
//----
public write2 (i:int) :(unit) = { 
  if !is_open2
  then secret := i
  else ()
};
public read7 (u:unit) :(unit) = {
  is_open2 := 1;
  (let tmpx = !secret in
  (send(tmpx);
  is_open2 := 0;
  assert((!secret) == tmpx)))
};

//reentrancy
//----------
public withdraw (m:int) :(unit) = {
  if (not (!funds < m))
  then send(m);
       funds := !funds - m;
       assert(not(!funds < 0))
  else ()};
