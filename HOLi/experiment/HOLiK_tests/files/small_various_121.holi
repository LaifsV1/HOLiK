# set-bounds 2 1 #
import syscall :(int -> unit)
import send :(int -> unit)
import getInput :(unit -> int)
import userExec :((unit -> unit) -> unit)
import getUser :(unit -> int)
import get_ext :(unit -> int)
import set_ext :(int -> unit)
import f2 :(unit -> unit)

int a1 := 0;
int b1 := 0;
int a2 := 0;
int b2 := 0;
int c2 := 0;
int d2 := 0;
int a3 := 0;
int balance1  := 100;
int bonus1    := 1;
int address   := 0;
int address2  := 0;
int addr      := 0;
int address4  := 0;
int addr5     := 0;
int lock      := 0; 
int readMAX   := 3;
int read_only := 100;
int is_open   := 0;
fun list      := empty;
int cnt       := 0;
int running   := 0;
int is_open2  := 0;
int secret    := 0;
int funds     := 100;
int total     := 100;
int balance2  := 100;
int wallet    := 0;
int userID    := 42;
int balance3  := 100;
int param3    := 50;
int local     := 0;
int remote    := 0;
int error     := 0;
int local2    := 0;
int remote2   := 0;
int error2    := 0;
int tmp       := -1;
int seats_remaining := 10;
int x       := 0;
int x2      := 0;
int reached := 0;
int x3      := 0;


//call no order
//-------------
public isNone (i:int) :(unit) = {
  a1 := 1
};

public isA (i:int) :(unit) = {
  b1 := 1
};

public isAB (i:int) :(unit) = {
  assert(not(!a1 && !b1))
};

//call order
//----------
public isNone2 (i:int) :(unit) = {
  if not(!a2 || !b2 || !c2 || !d2)
  then a2 := 1; syscall 0
  else ()
};

public isA2 (i:int) :(unit) = {
  if !a2 && not(!b2 || !c2 || !d2)
  then b2 := 1; syscall 1
  else ()
};

public isAB2 (i:int) :(unit) = {
  if !a2 && !b2 && not(!c2 || !d2)
  then c2 := 1; syscall 2
  else ()
};

public isABC2 (i:int) :(unit) = {
  if !a2 && !b2 && !c2 && not(!d2)
  then d2 := 1; syscall 3
  else ()
};

public isABCD2 (i:int) :(unit) = {
  if !a2 && !b2 && !c2 && !d2
  then assert(0)
  else ()
};

//call order param
//----------------
public add (i:int) :(unit) = {
  a3 := !a3 + 1;
  syscall(i)
};

//cross reentrancy
//----------------
private transfer (m:int) :(unit) = {
  if ((m - 1) < !balance1)
  then balance1 := !balance1 - m;
       send m;
       assert(not(!balance1 < 0))
  else ()};

public claimBonus (u:unit) :(unit) = {
  if (0 < !bonus1)
  then transfer 10;
       bonus1 := !bonus1 - 1;
       assert(not(!bonus1 < 0))
  else ()};

//double alloc 1
//--------------
private allocate (u:unit) :(unit) = {
  assert(not(!address));
  address := 1
};

private free (u:unit) :(unit) = {
  assert(!address);
  address := 0
};

private update (i:int) :(unit) = {
  assert(!address);
  address := i
};

private read (u:int) :(int) = {
  assert(!address);
  !address
};

public initialise (u:unit) :(unit) = {
  allocate();
  (let user_input = getInput () in
  if 0 < user_input
  then update(user_input);
       assert(read() == user_input);
       free()
  else ())
};
