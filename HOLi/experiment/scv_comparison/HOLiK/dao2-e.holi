# set-bounds 2 1 #
import send :(int -> unit)

int balance1 := 100;
int balance2 := 100;
int balance3 := 100;
int balance4 := 100;
int balance5 := 100;
int balance6 := 100;
int balance7 := 100;
int balance8 := 100;
int balance9 := 100;
int balance10 := 100;

public withdraw1 (m:int) :(unit) = {
  if (not (!balance1 < m))
  then send(m);
       balance1 := !balance1 - m;
       assert(not(!balance1 < 0))
  else ()};

public withdraw2 (m:int) :(unit) = {
  if (not (!balance2 < m))
  then send(m);
       balance2 := !balance2 - m;
       assert(not(!balance2 < 0))
  else ()};

public withdraw3 (m:int) :(unit) = {
  if (not (!balance3 < m))
  then send(m);
       balance3 := !balance3 - m;
       assert(not(!balance3 < 0))
  else ()};

public withdraw4 (m:int) :(unit) = {
  if (not (!balance4 < m))
  then send(m);
       balance4 := !balance4 - m;
       assert(not(!balance4 < 0))
  else ()};

public withdraw5 (m:int) :(unit) = {
  if (not (!balance5 < m))
  then send(m);
       balance5 := !balance5 - m;
       assert(not(!balance5 < 0))
  else ()};

public withdraw6 (m:int) :(unit) = {
  if (not (!balance6 < m))
  then send(m);
       balance6 := !balance6 - m;
       assert(not(!balance6 < 0))
  else ()};

public withdraw7 (m:int) :(unit) = {
  if (not (!balance7 < m))
  then send(m);
       balance7 := !balance7 - m;
       assert(not(!balance7 < 0))
  else ()};

public withdraw8 (m:int) :(unit) = {
  if (not (!balance8 < m))
  then send(m);
       balance8 := !balance8 - m;
       assert(not(!balance8 < 0))
  else ()};

public withdraw9 (m:int) :(unit) = {
  if (not (!balance9 < m))
  then send(m);
       balance9 := !balance9 - m;
       assert(not(!balance9 < 0))
  else ()};

public withdraw10 (m:int) :(unit) = {
  if (not (!balance10 < m))
  then send(m);
       balance10 := !balance10 - m;
       assert(not(!balance10 < 0))
  else ()};


