# set-bounds 4 1 #

import send :(int -> unit)
import refund :(int -> unit)
import file_stream :(unit -> int)

int balance_cr := 100;
int bonus := 1;
int currentbid := 100;
int access_granted := 0;
int balance_r := 100;
int x := 0;
int lock := 1;
int c := 0;
int c1 := 0;
int c2 := 0;

//cross reentrancy
//----------------
private transfer (m:int) :(unit) = {
  if (not (!balance_cr < m))
  then balance_cr := !balance_cr - m;
       send m;
       assert(not(!balance_cr < 0))
  else ()};

public claimBonus (u:unit) :(unit) = {
  if (not (!bonus < 1))
  then bonus := !bonus - 1;
       transfer 10;
       assert(not(!bonus < 0))
  else ()};

//dos safe
//--------

public bid (m:int) :(unit) = {
  if (!currentbid < m)
  then refund(m);
       currentbid := m;
       assert(!currentbid == m)
  else ()};

//optimistic safe
//---------------
public check_access (u:unit) :(unit) = {
  let access = file_stream () in
  (if access
  then access_granted := 1
  else access_granted := 0);
  assert((access && !access_granted) || (not(access) && not(!access_granted)))
};

//reentrancy safe
//---------------
public withdraw (m:int) :(unit) = {
  if (not (!balance_r < m))
  then balance_r := !balance_r - m;
       send(m);
       assert(not(!balance_r < 0))
  else ()};

//lock counter safe
//-----------------
public inc (f:unit -> unit) :(unit) = {
  if !lock
  then let old = !c in
       lock := 0;
       f();
       c := !c + 1;
       lock := 1;
       assert( !c == old + 1 )
  else ()
};
public read (u:unit) :(int) = { !c };

//reverse counter safe
//--------------------
public increase (x:int) :(unit) = { c1 := !c1+x ; c2 := x };
public check (x:unit) :(unit) = { assert(!c1 == !c2) } ;