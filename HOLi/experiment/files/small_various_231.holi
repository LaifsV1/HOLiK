# set-bounds 3 1 #
import syscall :(int -> unit)
import send :(int -> unit)
import getInput :(unit -> int)
import userExec :((unit -> unit) -> unit)
import getUser :(unit -> int)
import get_ext :(unit -> int)
import set_ext :(int -> unit)
import f2 :(unit -> unit)

int a1 := 0;
int b1 := 0;
int a2 := 0;
int b2 := 0;
int c2 := 0;
int d2 := 0;
int a3 := 0;
int balance1  := 100;
int bonus1    := 1;
int address   := 0;
int address2  := 0;
int addr      := 0;
int address4  := 0;
int addr5     := 0;
int lock      := 0; 
int readMAX   := 3;
int read_only := 100;
int is_open   := 0;
fun list      := empty;
int cnt       := 0;
int running   := 0;
int is_open2  := 0;
int secret    := 0;
int funds     := 100;
int total     := 100;
int balance2  := 100;
int wallet    := 0;
int userID    := 42;
int balance3  := 100;
int param3    := 50;
int local     := 0;
int remote    := 0;
int error     := 0;
int local2    := 0;
int remote2   := 0;
int error2    := 0;
int tmp       := -1;
int seats_remaining := 10;
int x       := 0;
int x2      := 0;
int reached := 0;
int x3      := 0;

//double alloc 2
//--------------
private allocate2 (u:unit) :(unit) = {
  assert(not(!address2));
  address2 := 1
};

private free2 (u:unit) :(unit) = {
  assert(!address2);
  address2 := 0
};

private update2 (i:int) :(unit) = {
  assert(!address2);
  address2 := i
};

private read2 (u:int) :(int) = {
  assert(!address2);
  !address2
};

public initialise2 (u:unit) :(unit) = {
  let user_input = getInput () in
  allocate2();
  if 0 < user_input
  then update2(user_input);
       assert(read2() == user_input);
       free2()
  else ()
};

//double alloc simple
//-------------------
private allocate3 (u:unit) :(unit) = {  assert(not(!addr)); addr := 1  };

private free3 (u:unit) :(unit) = {  if (!addr) then addr := 0 else () };

private doSthing (u:int) :(unit) = { () };

public run1 (u:unit) :(unit) = {
  allocate3();
  doSthing(getInput ());
  free3()
};

//double free
//-----------
private allocate4 (u:unit) :(unit) = {
  assert(not(!address4));
  address4 := 1
};

private free4 (u:unit) :(unit) = {
  assert(!address4);
  address4 := 0
};

private update4 (i:int) :(unit) = {
  assert(!address4);
  address4 := i
};

private read4 (u:int) :(int) = {
  assert(!address4);
  !address4
};

public initialise4 (u:unit) :(unit) = {
  (if !address4
  then ()
  else allocate4()); 
  (let user_input = getInput () in
  if 0 < user_input
  then update4(user_input);
       assert(read4() == user_input);
       free4()
  else ())
};

//double free simple
//------------------
private allocate5 (u:unit) :(unit) = { if not(!addr5) then addr5 := 1 else () };

private free5 (u:unit) :(unit) = { assert(!addr5); addr5 := 0 };

private doSthing2 (i:int) :(unit) = { () };

public run2 (u:unit) :(unit) = {
  allocate5(); 
  doSthing2(getInput ());
  free5()
};

//file lock
//---------
private doSthing3(x:unit) :(unit) = { () };

public openFile (u:unit) :(unit) = {
  if (!lock)
  then ()
  else lock := 1;
       (let write = fun (x:unit) :(unit) -> (assert(!lock); doSthing3()) in
       userExec(write);
       lock := 0) };
