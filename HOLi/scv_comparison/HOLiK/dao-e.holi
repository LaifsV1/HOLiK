# set-bounds 2 1 #
import send :(int -> unit)

public withdraw (m:int) :(unit) = {
  if (not (!balance < m))
  then send(m);
       balance := !balance - m;
       assert(not(!balance < 0))
  else ()};
int balance := 100;

// reentrancy attack adapted from the DAO attack
// this is a simplification of the smart contract involved in the DAO attack
// error trace: call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send ()
// fix: update balance before calling send

