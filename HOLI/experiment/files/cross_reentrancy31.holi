# set-bounds 3 1 #
import send :(int -> unit)

private transfer (m:int) :(unit) = {
  if ((m - 1) < !balance)
  then balance := !balance - m;
       send m;
       assert(not(!balance < 0))
  else ()};

public claimBonus (u:unit) :(unit) = {
  if (0 < !bonus)
  then transfer 10;
       bonus := !bonus - 1;
       assert(not(!bonus < 0))
  else ()};

int balance := 100;
int bonus := 1;

// cross reentrancy attack adapted from smart contracts
// error trace: call claimBonus () ~> call send 10 ~> call claimBonus () ~> call send 10 ~> ret send () ~> ret claimBonus () ~> ret send ()
// fix: update bonus before calling transfer
