# set-bounds 1 1 #
import syscall :(int -> unit)
import send :(int -> unit)
import getInput :(unit -> int)
import userExec :((unit -> unit) -> unit)
import getUser :(unit -> int)
import get_ext :(unit -> int)
import set_ext :(int -> unit)

int a1 := 0;
int b1 := 0;
int a2 := 0;
int b2 := 0;
int c2 := 0;
int d2 := 0;
int a3 := 0;
int balance1  := 100;
int bonus1    := 1;
int address   := 0;
int address2  := 0;
int addr      := 0;
int address4  := 0;
int addr5     := 0;
int lock      := 0; 
int readMAX   := 3;
int read_only := 100;
int is_open   := 0;
fun list      := empty;
int cnt       := 0;
int running   := 0;
int is_open2  := 0;
int secret    := 0;
int funds     := 100;
int total     := 100;
int balance2  := 100;
int wallet    := 0;
int userID    := 42;
int balance3  := 100;
int param3    := 50;
int local     := 0;
int remote    := 0;
int error     := 0;
int local2    := 0;
int remote2   := 0;
int error2    := 0;
int tmp       := -1;
int seats_remaining := 10;

//call no order
//-------------
public isNone (i:int) :(unit) = {
  a1 := 1
};

public isA (i:int) :(unit) = {
  b1 := 1
};

public isAB (i:int) :(unit) = {
  assert(not(!a1 && !b1))
};

//call order
//----------
public isNone (i:int) :(unit) = {
  if not(!a2 || !b2 || !c2 || !d2)
  then a2 := 1; syscall 0
  else ()
};

public isA (i:int) :(unit) = {
  if !a2 && not(!b2 || !c2 || !d2)
  then b2 := 1; syscall 1
  else ()
};

public isAB (i:int) :(unit) = {
  if !a2 && !b2 && not(!c2 || !d2)
  then c2 := 1; syscall 2
  else ()
};

public isABC (i:int) :(unit) = {
  if !a2 && !b2 && !c2 && not(!d2)
  then d2 := 1; syscall 3
  else ()
};

public isABCD (i:int) :(unit) = {
  if !a2 && !b2 && !c2 && !d2
  then assert(0)
  else ()
};

//call order param
//----------------
public add (i:int) :(unit) = {
  a3 := !a3 + 1;
  syscall(i)
};

//cross reentrancy
//----------------
private transfer (m:int) :(unit) = {
  if ((m - 1) < !balance1)
  then balance1 := !balance1 - m;
       send m;
       assert(not(!balance1 < 0))
  else ()};

public claimBonus (u:unit) :(unit) = {
  if (0 < !bonus1)
  then transfer 10;
       bonus1 := !bonus1 - 1;
       assert(not(!bonus1 < 0))
  else ()};

//double alloc 1
//--------------
private allocate (u:unit) :(unit) = {
  assert(not(!address));
  address := 1
};

private free (u:unit) :(unit) = {
  assert(!address);
  address := 0
};

private update (i:int) :(unit) = {
  assert(!address);
  address := i
};

private read (u:int) :(int) = {
  assert(!address);
  !address
};

public initialise (u:unit) :(unit) = {
  allocate();
  (let user_input = getInput () in
  if 0 < user_input
  then update(user_input);
       assert(read() == user_input);
       free()
  else ())
};

//double alloc 2
//--------------
private allocate2 (u:unit) :(unit) = {
  assert(not(!address2));
  address2 := 1
};

private free2 (u:unit) :(unit) = {
  assert(!address2);
  address2 := 0
};

private update2 (i:int) :(unit) = {
  assert(!address2);
  address2 := i
};

private read2 (u:int) :(int) = {
  assert(!address2);
  !address2
};

public initialise2 (u:unit) :(unit) = {
  let user_input = getInput () in
  allocate2();
  if 0 < user_input
  then update2(user_input);
       assert(read2() == user_input);
       free2()
  else ()
};

//double alloc simple
//-------------------
private allocate3 (u:unit) :(unit) = {  assert(not(!addr)); addr := 1  };

private free3 (u:unit) :(unit) = {  if (!addr) then addr := 0 else () };

private doSthing (u:int) :(unit) = { () };

public run1 (u:unit) :(unit) = {
  allocate3();
  doSthing(getInput ());
  free3()
};

//double free
//-----------
private allocate4 (u:unit) :(unit) = {
  assert(not(!address4));
  address4 := 1
};

private free4 (u:unit) :(unit) = {
  assert(!address4);
  address4 := 0
};

private update4 (i:int) :(unit) = {
  assert(!address4);
  address4 := i
};

private read4 (u:int) :(int) = {
  assert(!address4);
  !address4
};

public initialise4 (u:unit) :(unit) = {
  (if !address4
  then ()
  else allocate4()); 
  (let user_input = getInput () in
  if 0 < user_input
  then update4(user_input);
       assert(read4() == user_input);
       free4()
  else ())
};

//double free simple
//------------------
private allocate5 (u:unit) :(unit) = { if not(!addr5) then addr5 := 1 else () };

private free5 (u:unit) :(unit) = { assert(!addr5); addr5 := 0 };

private doSthing (i:int) :(unit) = { () };

public run2 (u:unit) :(unit) = {
  allocate5(); 
  doSthing(getInput ());
  free5()
};

//file lock
//---------
private doSthing(x:unit) :(unit) = { () };

public openFile (u:unit) :(unit) = {
  if (!lock)
  then ()
  else lock := 1;
       (let write = fun (x:unit) :(unit) -> (assert(!lock); doSthing()) in
       userExec(write);
       lock := 0) };

//file lock param
//---------------
public read (u:unit) :(unit) = {
  readMAX := !readMAX - 1;
  assert(0 < !readMAX)
};

//file write
//----------
private openFile (u:unit) :(unit) = {
  is_open := 1
};

private closeFile (u:unit) :(unit) = {
  is_open := 0
};

//opponent shouldn't write since file is not open
public write (i:int) :(unit) = {
  if !is_open
  then read_only := i
  else ()
};

//opponent abuses this to open file so they can write
public read (u:unit) :(unit) = {
  openFile();
  (let secret = !read_only in
  send(secret);
  closeFile();
  assert((!read_only) == secret))
};

//flat combiner
//-------------
private empty (x:int) :(unit) = { () };

public enlist (f: unit -> unit) :(unit) = {
   if (!running) then ()
   else 
       cnt := !cnt + 1;
       (let c = !cnt in
        let l = !list in 
        list := 
         (fun (z:int) :(unit) -> 
         (if (z == c) then f() else l(z))))
};

public run(x:unit) :(unit) = {
   running := 1;
   if (0 < !cnt) then 
      (!list)(!cnt);
      cnt := !cnt - 1;
      assert(not (!cnt < 0));
      run()
   else (list := empty; running := 0)       
};

//read
//----
public write (i:int) :(unit) = { 
  if !is_open2
  then secret := i
  else ()
};
public read (u:unit) :(unit) = {
  is_open2 := 1;
  (let tmp = !secret in
  (send(tmp);
  is_open2 := 0;
  assert((!secret) == tmp)))
};

//reentrancy
//----------
public withdraw (m:int) :(unit) = {
  if (not (!funds < m))
  then send(m);
       funds := !funds - m;
       assert(not(!funds < 0))
  else ()};

//reentrancy 2
//------------
public withdraw2 (m:int) :(unit) = {
  if ((m - 1) < !balance2)
  then if (!userID == (getUser()))
       then wallet  := !wallet  + m;
            balance2 := !balance2 - m;
            assert(-1 < !balance2)
       else ()
  else ()};

//reentrancy param
//----------------
public withdraw (m:int) :(unit) = {
  if ((m - 1) < !param3)
  then send(m);
       balance := !balance3 - m;
       assert(not(!balance3 < 0))
  else ()};

//remote sync 1
//-------------
public remoteUpdate (u:unit) :(unit) = {
  let tmp = !local in
  remoteSet(tmp);
  assert(if !error then 1 else tmp == remoteGet())
};

public localUpdate (i:int) :(unit) = {
  local := i
};

private remoteSet (i:int) :(unit) = {
  remote := i;
  set_ext(i)
};

private remoteGet (u:unit) :(int) = {
  let tmp = get_ext() in
  if not(tmp == !remote)
  then error := 1; tmp
  else tmp
};

//remote sync 2
//-------------
public updateRemote2 (u:unit) :(unit) = {
  let tmp2 = !local2 in
  remote2 := tmp2;
  tmp := getRemote2();
  assert(if !error2 then 1 else (!tmp == tmp2))
};

public updateLocal2 (i:int) :(unit) = {
  local2 := i
};

private getRemote2 (u:unit) :(int) = {
  let tmp2 = get_ext() in
  if tmp2 == !remote2
  then tmp2
  else error2 := 1; tmp2
};

//reservation
//-----------
public reserve (x:int) :(unit) = {
  if (x - 1) < !seats_remaining
  then send_confirmation();
       seats_remaining := !seats_remaining - x;
       assert(0 < (!seats_remaining + 1))
  else ()
};