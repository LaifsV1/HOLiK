# set-bounds 4 1 #
import send :(int -> unit)

private transfer (m:int) :(unit) = {
  if (not (!funds < m))
  then funds := !funds - m;
       send m;
       assert(not(!funds < 0))
  else ()};

public claimBonus (u:unit) :(unit) = {
  if (not (!bonus < 1))
  then transfer 10;
       bonus := !bonus - 1;
       assert(not(!bonus < 0))
  else ()};

int funds := 100;
int bonus := 1;

// error trace: call claimBonus () ~> call send 10 ~> call claimBonus () ~> call send 10 ~> ret send () ~> ret claimBonus () ~> ret send ()
// fix: update bonus before calling transfer
