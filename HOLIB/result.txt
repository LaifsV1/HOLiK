  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _6 |-> 100 - _1
      _10 |-> _6 < 0
      _12 |-> not _10
      funds |-> _6
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _6 Int ) ( assert ( = _6 ( - 100 _1 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( < _6 0 ) 1 0 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( = _10 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _12 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      1
    </lbound>
    <lzero>
      1
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send ()
    </trace>
    <z3>
      .
    </z3>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 < _5
      _8 |-> not _7
      _14 |-> 100 - _5
      _16 |-> _14 < 0
      _17 |-> not _16
      _21 |-> _14 - _1
      _23 |-> _21 < 0
      _24 |-> not _23
      funds |-> _21
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( = _7 0 ) 1 0 ) ) ) ( declare-const _9 Int ) ( declare-const _14 Int ) ( assert ( = _14 ( - 100 _5 ) ) ) ( declare-const _16 Int ) ( assert ( = _16 ( ite ( < _14 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( assert ( = _17 ( ite ( = _16 0 ) 1 0 ) ) ) ( declare-const _20 Int ) ( declare-const _21 Int ) ( assert ( = _21 ( - _14 _1 ) ) ) ( declare-const _23 Int ) ( assert ( = _23 ( ite ( < _21 0 ) 1 0 ) ) ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( = _23 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _8 0 ) ) ) ( assert ( not ( = _17 0 ) ) ) ( assert ( = _24 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      1
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send ()
    </trace>
    <z3>
      .
    </z3>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 < _5
      _8 |-> not _7
      _15 |-> 100 - _1
      _18 |-> _15 < 0
      _19 |-> not _18
      funds |-> _15
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( = _7 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _15 Int ) ( assert ( = _15 ( - 100 _1 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( < _15 0 ) 1 0 ) ) ) ( declare-const _19 Int ) ( assert ( = _19 ( ite ( = _18 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _8 0 ) ) ( assert ( = _19 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      1
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send ()
    </trace>
    <z3>
      .
    </z3>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 < _5
      _8 |-> not _7
      _14 |-> 100 - _5
      _16 |-> _14 < 0
      _17 |-> not _16
      funds |-> _14
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( = _7 0 ) 1 0 ) ) ) ( declare-const _9 Int ) ( declare-const _14 Int ) ( assert ( = _14 ( - 100 _5 ) ) ) ( declare-const _16 Int ) ( assert ( = _16 ( ite ( < _14 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( assert ( = _17 ( ite ( = _16 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _8 0 ) ) ) ( assert ( = _17 0 ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      1
    </lbound>
    <lzero>
      1
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send ()
    </trace>
    <z3>
      .
    </z3>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _5 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 < _5
      _8 |-> not _7
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( = _7 0 ) 1 0 ) ) ) ( declare-const _11 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _8 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      1
    </lbound>
    <lzero>
      1
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> call withdraw _11
    </trace>
    <z3>
      .
    </z3>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _6 |-> 100 - _1
      _10 |-> _6 < 0
      _12 |-> not _10
      funds |-> _6
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _6 Int ) ( assert ( = _6 ( - 100 _1 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( < _6 0 ) 1 0 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( = _10 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _12 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      1
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw ()
    </trace>
    <z3>
      .
    </z3>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 < _5
      _8 |-> not _7
      _14 |-> 100 - _5
      _16 |-> _14 < 0
      _17 |-> not _16
      _21 |-> _14 - _1
      _23 |-> _21 < 0
      _24 |-> not _23
      funds |-> _21
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( = _7 0 ) 1 0 ) ) ) ( declare-const _9 Int ) ( declare-const _14 Int ) ( assert ( = _14 ( - 100 _5 ) ) ) ( declare-const _16 Int ) ( assert ( = _16 ( ite ( < _14 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( assert ( = _17 ( ite ( = _16 0 ) 1 0 ) ) ) ( declare-const _20 Int ) ( declare-const _21 Int ) ( assert ( = _21 ( - _14 _1 ) ) ) ( declare-const _23 Int ) ( assert ( = _23 ( ite ( < _21 0 ) 1 0 ) ) ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( = _23 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _8 0 ) ) ) ( assert ( not ( = _17 0 ) ) ) ( assert ( not ( = _24 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      1
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw ()
    </trace>
    <z3>
      .
    </z3>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 < _5
      _8 |-> not _7
      _15 |-> 100 - _1
      _18 |-> _15 < 0
      _19 |-> not _18
      funds |-> _15
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( = _7 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _15 Int ) ( assert ( = _15 ( - 100 _1 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( < _15 0 ) 1 0 ) ) ) ( declare-const _19 Int ) ( assert ( = _19 ( ite ( = _18 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _8 0 ) ) ( assert ( not ( = _19 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      1
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw ()
    </trace>
    <z3>
      .
    </z3>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      1
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw ()
    </trace>
    <z3>
      .
    </z3>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 < _5
      _8 |-> not _7
      _14 |-> 100 - _5
      _16 |-> _14 < 0
      _17 |-> not _16
      funds |-> _14
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( = _7 0 ) 1 0 ) ) ) ( declare-const _9 Int ) ( declare-const _14 Int ) ( assert ( = _14 ( - 100 _5 ) ) ) ( declare-const _16 Int ) ( assert ( = _16 ( ite ( < _14 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( assert ( = _17 ( ite ( = _16 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _8 0 ) ) ) ( assert ( not ( = _17 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      1
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw ()
    </trace>
    <z3>
      .
    </z3>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 < _5
      _8 |-> not _7
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( = _7 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _8 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      1
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw ()
    </trace>
    <z3>
      .
    </z3>
  </T>
