  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _53 |-> _7 - _22
      _74 |-> _53 < 0
      _85 |-> not _74
      funds |-> _53
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _43 Int ) ( declare-const _53 Int ) ( assert ( = _53 ( - _7 _22 ) ) ) ( declare-const _74 Int ) ( assert ( = _74 ( ite ( < _53 0 ) 1 0 ) ) ) ( declare-const _85 Int ) ( assert ( = _85 ( ite ( = _74 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( = _85 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _58 |-> _7 < _46
      _69 |-> not _58
      _89 |-> _7 - _46
      _111 |-> _89 < 0
      _123 |-> not _111
      _147 |-> _89 - _22
      _167 |-> _147 < 0
      _175 |-> not _167
      funds |-> _147
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _46 Int ) ( declare-const _58 Int ) ( assert ( = _58 ( ite ( < _7 _46 ) 1 0 ) ) ) ( declare-const _69 Int ) ( assert ( = _69 ( ite ( = _58 0 ) 1 0 ) ) ) ( declare-const _75 Int ) ( declare-const _89 Int ) ( assert ( = _89 ( - _7 _46 ) ) ) ( declare-const _111 Int ) ( assert ( = _111 ( ite ( < _89 0 ) 1 0 ) ) ) ( declare-const _123 Int ) ( assert ( = _123 ( ite ( = _111 0 ) 1 0 ) ) ) ( declare-const _132 Int ) ( declare-const _147 Int ) ( assert ( = _147 ( - _89 _22 ) ) ) ( declare-const _167 Int ) ( assert ( = _167 ( ite ( < _147 0 ) 1 0 ) ) ) ( declare-const _175 Int ) ( assert ( = _175 ( ite ( = _167 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( not ( = _69 0 ) ) ) ( assert ( not ( = _123 0 ) ) ) ( assert ( = _175 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      1
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> call withdraw _46 ~> call send _46 ~> ret send () ~> ret withdraw () ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _58 |-> _7 < _46
      _69 |-> not _58
      _95 |-> _7 - _22
      _115 |-> _95 < 0
      _128 |-> not _115
      funds |-> _95
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _46 Int ) ( declare-const _58 Int ) ( assert ( = _58 ( ite ( < _7 _46 ) 1 0 ) ) ) ( declare-const _69 Int ) ( assert ( = _69 ( ite ( = _58 0 ) 1 0 ) ) ) ( declare-const _79 Int ) ( declare-const _95 Int ) ( assert ( = _95 ( - _7 _22 ) ) ) ( declare-const _115 Int ) ( assert ( = _115 ( ite ( < _95 0 ) 1 0 ) ) ) ( declare-const _128 Int ) ( assert ( = _128 ( ite ( = _115 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( = _69 0 ) ) ( assert ( = _128 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      1
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> call withdraw _46 ~> ret withdraw () ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _149 |-> _55 - _99
      _169 |-> _149 < 0
      _179 |-> not _169
      funds |-> _149
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _133 Int ) ( declare-const _149 Int ) ( assert ( = _149 ( - _55 _99 ) ) ) ( declare-const _169 Int ) ( assert ( = _169 ( ite ( < _149 0 ) 1 0 ) ) ) ( declare-const _179 Int ) ( assert ( = _179 ( ite ( = _169 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( = _179 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _156 |-> _55 < _141
      _165 |-> not _156
      _183 |-> _55 - _141
      _198 |-> _183 < 0
      _206 |-> not _198
      _215 |-> _183 - _99
      _224 |-> _215 < 0
      _227 |-> not _224
      funds |-> _215
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _141 Int ) ( declare-const _156 Int ) ( assert ( = _156 ( ite ( < _55 _141 ) 1 0 ) ) ) ( declare-const _165 Int ) ( assert ( = _165 ( ite ( = _156 0 ) 1 0 ) ) ) ( declare-const _170 Int ) ( declare-const _183 Int ) ( assert ( = _183 ( - _55 _141 ) ) ) ( declare-const _198 Int ) ( assert ( = _198 ( ite ( < _183 0 ) 1 0 ) ) ) ( declare-const _206 Int ) ( assert ( = _206 ( ite ( = _198 0 ) 1 0 ) ) ) ( declare-const _209 Int ) ( declare-const _215 Int ) ( assert ( = _215 ( - _183 _99 ) ) ) ( declare-const _224 Int ) ( assert ( = _224 ( ite ( < _215 0 ) 1 0 ) ) ) ( declare-const _227 Int ) ( assert ( = _227 ( ite ( = _224 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( not ( = _165 0 ) ) ) ( assert ( not ( = _206 0 ) ) ) ( assert ( = _227 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      1
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> call withdraw _141 ~> call send _141 ~> ret send () ~> ret withdraw () ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _156 |-> _55 < _141
      _165 |-> not _156
      _187 |-> _55 - _99
      _201 |-> _187 < 0
      _208 |-> not _201
      funds |-> _187
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _141 Int ) ( declare-const _156 Int ) ( assert ( = _156 ( ite ( < _55 _141 ) 1 0 ) ) ) ( declare-const _165 Int ) ( assert ( = _165 ( ite ( = _156 0 ) 1 0 ) ) ) ( declare-const _173 Int ) ( declare-const _187 Int ) ( assert ( = _187 ( - _55 _99 ) ) ) ( declare-const _201 Int ) ( assert ( = _201 ( ite ( < _187 0 ) 1 0 ) ) ) ( declare-const _208 Int ) ( assert ( = _208 ( ite ( = _201 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( = _165 0 ) ) ( assert ( = _208 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      1
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> call withdraw _141 ~> ret withdraw () ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _97 |-> _23 - _50
      _117 |-> _97 < 0
      _129 |-> not _117
      funds |-> _97
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _81 Int ) ( declare-const _97 Int ) ( assert ( = _97 ( - _23 _50 ) ) ) ( declare-const _117 Int ) ( assert ( = _117 ( ite ( < _97 0 ) 1 0 ) ) ) ( declare-const _129 Int ) ( assert ( = _129 ( ite ( = _117 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( = _129 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _105 |-> _23 < _87
      _110 |-> not _105
      _139 |-> _23 - _87
      _155 |-> _139 < 0
      _164 |-> not _155
      _185 |-> _139 - _50
      _199 |-> _185 < 0
      _207 |-> not _199
      funds |-> _185
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _87 Int ) ( declare-const _105 Int ) ( assert ( = _105 ( ite ( < _23 _87 ) 1 0 ) ) ) ( declare-const _110 Int ) ( assert ( = _110 ( ite ( = _105 0 ) 1 0 ) ) ) ( declare-const _118 Int ) ( declare-const _139 Int ) ( assert ( = _139 ( - _23 _87 ) ) ) ( declare-const _155 Int ) ( assert ( = _155 ( ite ( < _139 0 ) 1 0 ) ) ) ( declare-const _164 Int ) ( assert ( = _164 ( ite ( = _155 0 ) 1 0 ) ) ) ( declare-const _172 Int ) ( declare-const _185 Int ) ( assert ( = _185 ( - _139 _50 ) ) ) ( declare-const _199 Int ) ( assert ( = _199 ( ite ( < _185 0 ) 1 0 ) ) ) ( declare-const _207 Int ) ( assert ( = _207 ( ite ( = _199 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( not ( = _110 0 ) ) ) ( assert ( not ( = _164 0 ) ) ) ( assert ( = _207 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      1
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> call withdraw _87 ~> call send _87 ~> ret send () ~> ret withdraw () ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _105 |-> _23 < _87
      _110 |-> not _105
      _142 |-> _23 - _50
      _158 |-> _142 < 0
      _166 |-> not _158
      funds |-> _142
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _87 Int ) ( declare-const _105 Int ) ( assert ( = _105 ( ite ( < _23 _87 ) 1 0 ) ) ) ( declare-const _110 Int ) ( assert ( = _110 ( ite ( = _105 0 ) 1 0 ) ) ) ( declare-const _124 Int ) ( declare-const _142 Int ) ( assert ( = _142 ( - _23 _50 ) ) ) ( declare-const _158 Int ) ( assert ( = _158 ( ite ( < _142 0 ) 1 0 ) ) ) ( declare-const _166 Int ) ( assert ( = _166 ( ite ( = _158 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( = _110 0 ) ) ( assert ( = _166 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      1
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> call withdraw _87 ~> ret withdraw () ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _21 |-> 100 - _6
      _29 |-> _21 < 0
      _39 |-> not _29
      funds |-> _21
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _14 Int ) ( declare-const _21 Int ) ( assert ( = _21 ( - 100 _6 ) ) ) ( declare-const _29 Int ) ( assert ( = _29 ( ite ( < _21 0 ) 1 0 ) ) ) ( declare-const _39 Int ) ( assert ( = _39 ( ite ( = _29 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( = _39 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _24 |-> 100 < _17
      _26 |-> not _24
      _45 |-> 100 - _17
      _57 |-> _45 < 0
      _68 |-> not _57
      _93 |-> _45 - _6
      _113 |-> _93 < 0
      _127 |-> not _113
      funds |-> _93
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( < 100 _17 ) 1 0 ) ) ) ( declare-const _26 Int ) ( assert ( = _26 ( ite ( = _24 0 ) 1 0 ) ) ) ( declare-const _30 Int ) ( declare-const _45 Int ) ( assert ( = _45 ( - 100 _17 ) ) ) ( declare-const _57 Int ) ( assert ( = _57 ( ite ( < _45 0 ) 1 0 ) ) ) ( declare-const _68 Int ) ( assert ( = _68 ( ite ( = _57 0 ) 1 0 ) ) ) ( declare-const _78 Int ) ( declare-const _93 Int ) ( assert ( = _93 ( - _45 _6 ) ) ) ( declare-const _113 Int ) ( assert ( = _113 ( ite ( < _93 0 ) 1 0 ) ) ) ( declare-const _127 Int ) ( assert ( = _127 ( ite ( = _113 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( not ( = _26 0 ) ) ) ( assert ( not ( = _68 0 ) ) ) ( assert ( = _127 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      1
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> call withdraw _17 ~> call send _17 ~> ret send () ~> ret withdraw () ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _24 |-> 100 < _17
      _26 |-> not _24
      _49 |-> 100 - _6
      _63 |-> _49 < 0
      _72 |-> not _63
      funds |-> _49
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( < 100 _17 ) 1 0 ) ) ) ( declare-const _26 Int ) ( assert ( = _26 ( ite ( = _24 0 ) 1 0 ) ) ) ( declare-const _35 Int ) ( declare-const _49 Int ) ( assert ( = _49 ( - 100 _6 ) ) ) ( declare-const _63 Int ) ( assert ( = _63 ( ite ( < _49 0 ) 1 0 ) ) ) ( declare-const _72 Int ) ( assert ( = _72 ( ite ( = _63 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( = _26 0 ) ) ( assert ( = _72 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      1
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> call withdraw _17 ~> ret withdraw () ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _61 |-> _20 < _48
      _71 |-> not _61
      _91 |-> _20 - _48
      _112 |-> _91 < 0
      _126 |-> not _112
      funds |-> _91
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _48 Int ) ( declare-const _61 Int ) ( assert ( = _61 ( ite ( < _20 _48 ) 1 0 ) ) ) ( declare-const _71 Int ) ( assert ( = _71 ( ite ( = _61 0 ) 1 0 ) ) ) ( declare-const _77 Int ) ( declare-const _91 Int ) ( assert ( = _91 ( - _20 _48 ) ) ) ( declare-const _112 Int ) ( assert ( = _112 ( ite ( < _91 0 ) 1 0 ) ) ) ( declare-const _126 Int ) ( assert ( = _126 ( ite ( = _112 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _71 0 ) ) ) ( assert ( = _126 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> call withdraw _48 ~> call send _48 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _25 |-> 100 < _19
      _27 |-> not _25
      _47 |-> 100 - _19
      _60 |-> _47 < 0
      _70 |-> not _60
      funds |-> _47
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _19 Int ) ( declare-const _25 Int ) ( assert ( = _25 ( ite ( < 100 _19 ) 1 0 ) ) ) ( declare-const _27 Int ) ( assert ( = _27 ( ite ( = _25 0 ) 1 0 ) ) ) ( declare-const _34 Int ) ( declare-const _47 Int ) ( assert ( = _47 ( - 100 _19 ) ) ) ( declare-const _60 Int ) ( assert ( = _60 ( ite ( < _47 0 ) 1 0 ) ) ) ( declare-const _70 Int ) ( assert ( = _70 ( ite ( = _60 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _27 0 ) ) ) ( assert ( = _70 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> call withdraw _19 ~> call send _19 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _6 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _24 |-> 100 < _17
      _26 |-> not _24
      _45 |-> 100 - _17
      _57 |-> _45 < 0
      _68 |-> not _57
      _101 |-> _45 < _84
      _108 |-> not _101
      _134 |-> _45 - _84
      _151 |-> _134 < 0
      _160 |-> not _151
      funds |-> _134
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( < 100 _17 ) 1 0 ) ) ) ( declare-const _26 Int ) ( assert ( = _26 ( ite ( = _24 0 ) 1 0 ) ) ) ( declare-const _30 Int ) ( declare-const _45 Int ) ( assert ( = _45 ( - 100 _17 ) ) ) ( declare-const _57 Int ) ( assert ( = _57 ( ite ( < _45 0 ) 1 0 ) ) ) ( declare-const _68 Int ) ( assert ( = _68 ( ite ( = _57 0 ) 1 0 ) ) ) ( declare-const _84 Int ) ( declare-const _101 Int ) ( assert ( = _101 ( ite ( < _45 _84 ) 1 0 ) ) ) ( declare-const _108 Int ) ( assert ( = _108 ( ite ( = _101 0 ) 1 0 ) ) ) ( declare-const _114 Int ) ( declare-const _134 Int ) ( assert ( = _134 ( - _45 _84 ) ) ) ( declare-const _151 Int ) ( assert ( = _151 ( ite ( < _134 0 ) 1 0 ) ) ) ( declare-const _160 Int ) ( assert ( = _160 ( ite ( = _151 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( not ( = _26 0 ) ) ) ( assert ( not ( = _68 0 ) ) ) ( assert ( not ( = _108 0 ) ) ) ( assert ( = _160 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> call withdraw _17 ~> call send _17 ~> ret send () ~> ret withdraw () ~> call withdraw _84 ~> call send _84 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _6 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _24 |-> 100 < _17
      _26 |-> not _24
      _51 |-> 100 < _40
      _52 |-> not _51
      _83 |-> 100 - _40
      _100 |-> _83 < 0
      _107 |-> not _100
      funds |-> _83
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( < 100 _17 ) 1 0 ) ) ) ( declare-const _26 Int ) ( assert ( = _26 ( ite ( = _24 0 ) 1 0 ) ) ) ( declare-const _40 Int ) ( declare-const _51 Int ) ( assert ( = _51 ( ite ( < 100 _40 ) 1 0 ) ) ) ( declare-const _52 Int ) ( assert ( = _52 ( ite ( = _51 0 ) 1 0 ) ) ) ( declare-const _64 Int ) ( declare-const _83 Int ) ( assert ( = _83 ( - 100 _40 ) ) ) ( declare-const _100 Int ) ( assert ( = _100 ( ite ( < _83 0 ) 1 0 ) ) ) ( declare-const _107 Int ) ( assert ( = _107 ( ite ( = _100 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( = _26 0 ) ) ( assert ( not ( = _52 0 ) ) ) ( assert ( = _107 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> call withdraw _17 ~> ret withdraw () ~> call withdraw _40 ~> call send _40 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _22 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _58 |-> _7 < _46
      _69 |-> not _58
      _89 |-> _7 - _46
      _111 |-> _89 < 0
      _123 |-> not _111
      _153 |-> _89 < _138
      _162 |-> not _153
      _181 |-> _89 - _138
      _197 |-> _181 < 0
      _203 |-> not _197
      funds |-> _181
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _46 Int ) ( declare-const _58 Int ) ( assert ( = _58 ( ite ( < _7 _46 ) 1 0 ) ) ) ( declare-const _69 Int ) ( assert ( = _69 ( ite ( = _58 0 ) 1 0 ) ) ) ( declare-const _75 Int ) ( declare-const _89 Int ) ( assert ( = _89 ( - _7 _46 ) ) ) ( declare-const _111 Int ) ( assert ( = _111 ( ite ( < _89 0 ) 1 0 ) ) ) ( declare-const _123 Int ) ( assert ( = _123 ( ite ( = _111 0 ) 1 0 ) ) ) ( declare-const _138 Int ) ( declare-const _153 Int ) ( assert ( = _153 ( ite ( < _89 _138 ) 1 0 ) ) ) ( declare-const _162 Int ) ( assert ( = _162 ( ite ( = _153 0 ) 1 0 ) ) ) ( declare-const _168 Int ) ( declare-const _181 Int ) ( assert ( = _181 ( - _89 _138 ) ) ) ( declare-const _197 Int ) ( assert ( = _197 ( ite ( < _181 0 ) 1 0 ) ) ) ( declare-const _203 Int ) ( assert ( = _203 ( ite ( = _197 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( not ( = _69 0 ) ) ) ( assert ( not ( = _123 0 ) ) ) ( assert ( not ( = _162 0 ) ) ) ( assert ( = _203 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> call withdraw _46 ~> call send _46 ~> ret send () ~> ret withdraw () ~> call withdraw _138 ~> call send _138 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _22 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _58 |-> _7 < _46
      _69 |-> not _58
      _103 |-> _7 < _86
      _109 |-> not _103
      _136 |-> _7 - _86
      _152 |-> _136 < 0
      _161 |-> not _152
      funds |-> _136
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _46 Int ) ( declare-const _58 Int ) ( assert ( = _58 ( ite ( < _7 _46 ) 1 0 ) ) ) ( declare-const _69 Int ) ( assert ( = _69 ( ite ( = _58 0 ) 1 0 ) ) ) ( declare-const _86 Int ) ( declare-const _103 Int ) ( assert ( = _103 ( ite ( < _7 _86 ) 1 0 ) ) ) ( declare-const _109 Int ) ( assert ( = _109 ( ite ( = _103 0 ) 1 0 ) ) ) ( declare-const _116 Int ) ( declare-const _136 Int ) ( assert ( = _136 ( - _7 _86 ) ) ) ( declare-const _152 Int ) ( assert ( = _152 ( ite ( < _136 0 ) 1 0 ) ) ) ( declare-const _161 Int ) ( assert ( = _161 ( ite ( = _152 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( = _69 0 ) ) ( assert ( not ( = _109 0 ) ) ) ( assert ( = _161 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> call withdraw _46 ~> ret withdraw () ~> call withdraw _86 ~> call send _86 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _50 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _105 |-> _23 < _87
      _110 |-> not _105
      _139 |-> _23 - _87
      _155 |-> _139 < 0
      _164 |-> not _155
      _190 |-> _139 < _178
      _195 |-> not _190
      _210 |-> _139 - _178
      _217 |-> _210 < 0
      _221 |-> not _217
      funds |-> _210
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _87 Int ) ( declare-const _105 Int ) ( assert ( = _105 ( ite ( < _23 _87 ) 1 0 ) ) ) ( declare-const _110 Int ) ( assert ( = _110 ( ite ( = _105 0 ) 1 0 ) ) ) ( declare-const _118 Int ) ( declare-const _139 Int ) ( assert ( = _139 ( - _23 _87 ) ) ) ( declare-const _155 Int ) ( assert ( = _155 ( ite ( < _139 0 ) 1 0 ) ) ) ( declare-const _164 Int ) ( assert ( = _164 ( ite ( = _155 0 ) 1 0 ) ) ) ( declare-const _178 Int ) ( declare-const _190 Int ) ( assert ( = _190 ( ite ( < _139 _178 ) 1 0 ) ) ) ( declare-const _195 Int ) ( assert ( = _195 ( ite ( = _190 0 ) 1 0 ) ) ) ( declare-const _200 Int ) ( declare-const _210 Int ) ( assert ( = _210 ( - _139 _178 ) ) ) ( declare-const _217 Int ) ( assert ( = _217 ( ite ( < _210 0 ) 1 0 ) ) ) ( declare-const _221 Int ) ( assert ( = _221 ( ite ( = _217 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( not ( = _110 0 ) ) ) ( assert ( not ( = _164 0 ) ) ) ( assert ( not ( = _195 0 ) ) ) ( assert ( = _221 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> call withdraw _87 ~> call send _87 ~> ret send () ~> ret withdraw () ~> call withdraw _178 ~> call send _178 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _50 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _105 |-> _23 < _87
      _110 |-> not _105
      _144 |-> _23 < _130
      _146 |-> not _144
      _176 |-> _23 - _130
      _189 |-> _176 < 0
      _194 |-> not _189
      funds |-> _176
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _87 Int ) ( declare-const _105 Int ) ( assert ( = _105 ( ite ( < _23 _87 ) 1 0 ) ) ) ( declare-const _110 Int ) ( assert ( = _110 ( ite ( = _105 0 ) 1 0 ) ) ) ( declare-const _130 Int ) ( declare-const _144 Int ) ( assert ( = _144 ( ite ( < _23 _130 ) 1 0 ) ) ) ( declare-const _146 Int ) ( assert ( = _146 ( ite ( = _144 0 ) 1 0 ) ) ) ( declare-const _159 Int ) ( declare-const _176 Int ) ( assert ( = _176 ( - _23 _130 ) ) ) ( declare-const _189 Int ) ( assert ( = _189 ( ite ( < _176 0 ) 1 0 ) ) ) ( declare-const _194 Int ) ( assert ( = _194 ( ite ( = _189 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( = _110 0 ) ) ( assert ( not ( = _146 0 ) ) ) ( assert ( = _194 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> call withdraw _87 ~> ret withdraw () ~> call withdraw _130 ~> call send _130 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _99 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _156 |-> _55 < _141
      _165 |-> not _156
      _183 |-> _55 - _141
      _198 |-> _183 < 0
      _206 |-> not _198
      _219 |-> _183 < _214
      _223 |-> not _219
      _228 |-> _183 - _214
      _230 |-> _228 < 0
      _231 |-> not _230
      funds |-> _228
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _141 Int ) ( declare-const _156 Int ) ( assert ( = _156 ( ite ( < _55 _141 ) 1 0 ) ) ) ( declare-const _165 Int ) ( assert ( = _165 ( ite ( = _156 0 ) 1 0 ) ) ) ( declare-const _170 Int ) ( declare-const _183 Int ) ( assert ( = _183 ( - _55 _141 ) ) ) ( declare-const _198 Int ) ( assert ( = _198 ( ite ( < _183 0 ) 1 0 ) ) ) ( declare-const _206 Int ) ( assert ( = _206 ( ite ( = _198 0 ) 1 0 ) ) ) ( declare-const _214 Int ) ( declare-const _219 Int ) ( assert ( = _219 ( ite ( < _183 _214 ) 1 0 ) ) ) ( declare-const _223 Int ) ( assert ( = _223 ( ite ( = _219 0 ) 1 0 ) ) ) ( declare-const _225 Int ) ( declare-const _228 Int ) ( assert ( = _228 ( - _183 _214 ) ) ) ( declare-const _230 Int ) ( assert ( = _230 ( ite ( < _228 0 ) 1 0 ) ) ) ( declare-const _231 Int ) ( assert ( = _231 ( ite ( = _230 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( not ( = _165 0 ) ) ) ( assert ( not ( = _206 0 ) ) ) ( assert ( not ( = _223 0 ) ) ) ( assert ( = _231 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> call withdraw _141 ~> call send _141 ~> ret send () ~> ret withdraw () ~> call withdraw _214 ~> call send _214 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _99 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _156 |-> _55 < _141
      _165 |-> not _156
      _192 |-> _55 < _180
      _196 |-> not _192
      _212 |-> _55 - _180
      _218 |-> _212 < 0
      _222 |-> not _218
      funds |-> _212
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _141 Int ) ( declare-const _156 Int ) ( assert ( = _156 ( ite ( < _55 _141 ) 1 0 ) ) ) ( declare-const _165 Int ) ( assert ( = _165 ( ite ( = _156 0 ) 1 0 ) ) ) ( declare-const _180 Int ) ( declare-const _192 Int ) ( assert ( = _192 ( ite ( < _55 _180 ) 1 0 ) ) ) ( declare-const _196 Int ) ( assert ( = _196 ( ite ( = _192 0 ) 1 0 ) ) ) ( declare-const _202 Int ) ( declare-const _212 Int ) ( assert ( = _212 ( - _55 _180 ) ) ) ( declare-const _218 Int ) ( assert ( = _218 ( ite ( < _212 0 ) 1 0 ) ) ) ( declare-const _222 Int ) ( assert ( = _222 ( ite ( = _218 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( = _165 0 ) ) ( assert ( not ( = _196 0 ) ) ) ( assert ( = _222 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> call withdraw _141 ~> ret withdraw () ~> call withdraw _180 ~> call send _180 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      funds |-> _7
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _18 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      funds |-> _55
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( = _88 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      1
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      funds |-> _23
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( = _42 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      1
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      funds |-> _20
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( = _38 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _6 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _24 |-> 100 < _17
      _26 |-> not _24
      _45 |-> 100 - _17
      _57 |-> _45 < 0
      _68 |-> not _57
      funds |-> _45
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( < 100 _17 ) 1 0 ) ) ) ( declare-const _26 Int ) ( assert ( = _26 ( ite ( = _24 0 ) 1 0 ) ) ) ( declare-const _30 Int ) ( declare-const _45 Int ) ( assert ( = _45 ( - 100 _17 ) ) ) ( declare-const _57 Int ) ( assert ( = _57 ( ite ( < _45 0 ) 1 0 ) ) ) ( declare-const _68 Int ) ( assert ( = _68 ( ite ( = _57 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( not ( = _26 0 ) ) ) ( assert ( = _68 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> call withdraw _17 ~> call send _17 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _22 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _58 |-> _7 < _46
      _69 |-> not _58
      _89 |-> _7 - _46
      _111 |-> _89 < 0
      _123 |-> not _111
      funds |-> _89
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _46 Int ) ( declare-const _58 Int ) ( assert ( = _58 ( ite ( < _7 _46 ) 1 0 ) ) ) ( declare-const _69 Int ) ( assert ( = _69 ( ite ( = _58 0 ) 1 0 ) ) ) ( declare-const _75 Int ) ( declare-const _89 Int ) ( assert ( = _89 ( - _7 _46 ) ) ) ( declare-const _111 Int ) ( assert ( = _111 ( ite ( < _89 0 ) 1 0 ) ) ) ( declare-const _123 Int ) ( assert ( = _123 ( ite ( = _111 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( not ( = _69 0 ) ) ) ( assert ( = _123 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> call withdraw _46 ~> call send _46 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _50 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _105 |-> _23 < _87
      _110 |-> not _105
      _139 |-> _23 - _87
      _155 |-> _139 < 0
      _164 |-> not _155
      funds |-> _139
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _87 Int ) ( declare-const _105 Int ) ( assert ( = _105 ( ite ( < _23 _87 ) 1 0 ) ) ) ( declare-const _110 Int ) ( assert ( = _110 ( ite ( = _105 0 ) 1 0 ) ) ) ( declare-const _118 Int ) ( declare-const _139 Int ) ( assert ( = _139 ( - _23 _87 ) ) ) ( declare-const _155 Int ) ( assert ( = _155 ( ite ( < _139 0 ) 1 0 ) ) ) ( declare-const _164 Int ) ( assert ( = _164 ( ite ( = _155 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( not ( = _110 0 ) ) ) ( assert ( = _164 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> call withdraw _87 ~> call send _87 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _99 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _156 |-> _55 < _141
      _165 |-> not _156
      _183 |-> _55 - _141
      _198 |-> _183 < 0
      _206 |-> not _198
      funds |-> _183
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _141 Int ) ( declare-const _156 Int ) ( assert ( = _156 ( ite ( < _55 _141 ) 1 0 ) ) ) ( declare-const _165 Int ) ( assert ( = _165 ( ite ( = _156 0 ) 1 0 ) ) ) ( declare-const _170 Int ) ( declare-const _183 Int ) ( assert ( = _183 ( - _55 _141 ) ) ) ( declare-const _198 Int ) ( assert ( = _198 ( ite ( < _183 0 ) 1 0 ) ) ) ( declare-const _206 Int ) ( assert ( = _206 ( ite ( = _198 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( not ( = _165 0 ) ) ) ( assert ( = _206 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> call withdraw _141 ~> call send _141 ~> ret send ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _5 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _16 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> call withdraw _16
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _17 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _6 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _24 |-> 100 < _17
      _26 |-> not _24
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( < 100 _17 ) 1 0 ) ) ) ( declare-const _26 Int ) ( assert ( = _26 ( ite ( = _24 0 ) 1 0 ) ) ) ( declare-const _36 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( not ( = _26 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> call withdraw _17 ~> call send _17 ~> call withdraw _36
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _19 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _25 |-> 100 < _19
      _27 |-> not _25
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _19 Int ) ( declare-const _25 Int ) ( assert ( = _25 ( ite ( < 100 _19 ) 1 0 ) ) ) ( declare-const _27 Int ) ( assert ( = _27 ( ite ( = _25 0 ) 1 0 ) ) ) ( declare-const _37 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _27 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> call withdraw _19 ~> call send _19 ~> call withdraw _37
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _40 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _6 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _24 |-> 100 < _17
      _26 |-> not _24
      _51 |-> 100 < _40
      _52 |-> not _51
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( < 100 _17 ) 1 0 ) ) ) ( declare-const _26 Int ) ( assert ( = _26 ( ite ( = _24 0 ) 1 0 ) ) ) ( declare-const _40 Int ) ( declare-const _51 Int ) ( assert ( = _51 ( ite ( < 100 _40 ) 1 0 ) ) ) ( declare-const _52 Int ) ( assert ( = _52 ( ite ( = _51 0 ) 1 0 ) ) ) ( declare-const _67 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( = _26 0 ) ) ( assert ( not ( = _52 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> call withdraw _17 ~> ret withdraw () ~> call withdraw _40 ~> call send _40 ~> call withdraw _67
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _46 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _22 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _58 |-> _7 < _46
      _69 |-> not _58
      funds |-> _7
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _46 Int ) ( declare-const _58 Int ) ( assert ( = _58 ( ite ( < _7 _46 ) 1 0 ) ) ) ( declare-const _69 Int ) ( assert ( = _69 ( ite ( = _58 0 ) 1 0 ) ) ) ( declare-const _80 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( not ( = _69 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> call withdraw _46 ~> call send _46 ~> call withdraw _80
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _48 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _61 |-> _20 < _48
      _71 |-> not _61
      funds |-> _20
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _48 Int ) ( declare-const _61 Int ) ( assert ( = _61 ( ite ( < _20 _48 ) 1 0 ) ) ) ( declare-const _71 Int ) ( assert ( = _71 ( ite ( = _61 0 ) 1 0 ) ) ) ( declare-const _82 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _71 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> call withdraw _48 ~> call send _48 ~> call withdraw _82
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _84 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _6 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _24 |-> 100 < _17
      _26 |-> not _24
      _45 |-> 100 - _17
      _57 |-> _45 < 0
      _68 |-> not _57
      _101 |-> _45 < _84
      _108 |-> not _101
      funds |-> _45
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( < 100 _17 ) 1 0 ) ) ) ( declare-const _26 Int ) ( assert ( = _26 ( ite ( = _24 0 ) 1 0 ) ) ) ( declare-const _30 Int ) ( declare-const _45 Int ) ( assert ( = _45 ( - 100 _17 ) ) ) ( declare-const _57 Int ) ( assert ( = _57 ( ite ( < _45 0 ) 1 0 ) ) ) ( declare-const _68 Int ) ( assert ( = _68 ( ite ( = _57 0 ) 1 0 ) ) ) ( declare-const _84 Int ) ( declare-const _101 Int ) ( assert ( = _101 ( ite ( < _45 _84 ) 1 0 ) ) ) ( declare-const _108 Int ) ( assert ( = _108 ( ite ( = _101 0 ) 1 0 ) ) ) ( declare-const _121 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( not ( = _26 0 ) ) ) ( assert ( not ( = _68 0 ) ) ) ( assert ( not ( = _108 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> call withdraw _17 ~> call send _17 ~> ret send () ~> ret withdraw () ~> call withdraw _84 ~> call send _84 ~> call withdraw _121
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _86 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _22 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _58 |-> _7 < _46
      _69 |-> not _58
      _103 |-> _7 < _86
      _109 |-> not _103
      funds |-> _7
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _46 Int ) ( declare-const _58 Int ) ( assert ( = _58 ( ite ( < _7 _46 ) 1 0 ) ) ) ( declare-const _69 Int ) ( assert ( = _69 ( ite ( = _58 0 ) 1 0 ) ) ) ( declare-const _86 Int ) ( declare-const _103 Int ) ( assert ( = _103 ( ite ( < _7 _86 ) 1 0 ) ) ) ( declare-const _109 Int ) ( assert ( = _109 ( ite ( = _103 0 ) 1 0 ) ) ) ( declare-const _122 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( = _69 0 ) ) ( assert ( not ( = _109 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> call withdraw _46 ~> ret withdraw () ~> call withdraw _86 ~> call send _86 ~> call withdraw _122
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _87 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _50 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _105 |-> _23 < _87
      _110 |-> not _105
      funds |-> _23
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _87 Int ) ( declare-const _105 Int ) ( assert ( = _105 ( ite ( < _23 _87 ) 1 0 ) ) ) ( declare-const _110 Int ) ( assert ( = _110 ( ite ( = _105 0 ) 1 0 ) ) ) ( declare-const _125 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( not ( = _110 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> call withdraw _87 ~> call send _87 ~> call withdraw _125
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _130 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _50 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _105 |-> _23 < _87
      _110 |-> not _105
      _144 |-> _23 < _130
      _146 |-> not _144
      funds |-> _23
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _87 Int ) ( declare-const _105 Int ) ( assert ( = _105 ( ite ( < _23 _87 ) 1 0 ) ) ) ( declare-const _110 Int ) ( assert ( = _110 ( ite ( = _105 0 ) 1 0 ) ) ) ( declare-const _130 Int ) ( declare-const _144 Int ) ( assert ( = _144 ( ite ( < _23 _130 ) 1 0 ) ) ) ( declare-const _146 Int ) ( assert ( = _146 ( ite ( = _144 0 ) 1 0 ) ) ) ( declare-const _163 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( = _110 0 ) ) ( assert ( not ( = _146 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> call withdraw _87 ~> ret withdraw () ~> call withdraw _130 ~> call send _130 ~> call withdraw _163
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _138 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _22 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _58 |-> _7 < _46
      _69 |-> not _58
      _89 |-> _7 - _46
      _111 |-> _89 < 0
      _123 |-> not _111
      _153 |-> _89 < _138
      _162 |-> not _153
      funds |-> _89
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _46 Int ) ( declare-const _58 Int ) ( assert ( = _58 ( ite ( < _7 _46 ) 1 0 ) ) ) ( declare-const _69 Int ) ( assert ( = _69 ( ite ( = _58 0 ) 1 0 ) ) ) ( declare-const _75 Int ) ( declare-const _89 Int ) ( assert ( = _89 ( - _7 _46 ) ) ) ( declare-const _111 Int ) ( assert ( = _111 ( ite ( < _89 0 ) 1 0 ) ) ) ( declare-const _123 Int ) ( assert ( = _123 ( ite ( = _111 0 ) 1 0 ) ) ) ( declare-const _138 Int ) ( declare-const _153 Int ) ( assert ( = _153 ( ite ( < _89 _138 ) 1 0 ) ) ) ( declare-const _162 Int ) ( assert ( = _162 ( ite ( = _153 0 ) 1 0 ) ) ) ( declare-const _171 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( not ( = _69 0 ) ) ) ( assert ( not ( = _123 0 ) ) ) ( assert ( not ( = _162 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> call withdraw _46 ~> call send _46 ~> ret send () ~> ret withdraw () ~> call withdraw _138 ~> call send _138 ~> call withdraw _171
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _141 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _99 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _156 |-> _55 < _141
      _165 |-> not _156
      funds |-> _55
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _141 Int ) ( declare-const _156 Int ) ( assert ( = _156 ( ite ( < _55 _141 ) 1 0 ) ) ) ( declare-const _165 Int ) ( assert ( = _165 ( ite ( = _156 0 ) 1 0 ) ) ) ( declare-const _174 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( not ( = _165 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> call withdraw _141 ~> call send _141 ~> call withdraw _174
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _178 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _50 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _105 |-> _23 < _87
      _110 |-> not _105
      _139 |-> _23 - _87
      _155 |-> _139 < 0
      _164 |-> not _155
      _190 |-> _139 < _178
      _195 |-> not _190
      funds |-> _139
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _87 Int ) ( declare-const _105 Int ) ( assert ( = _105 ( ite ( < _23 _87 ) 1 0 ) ) ) ( declare-const _110 Int ) ( assert ( = _110 ( ite ( = _105 0 ) 1 0 ) ) ) ( declare-const _118 Int ) ( declare-const _139 Int ) ( assert ( = _139 ( - _23 _87 ) ) ) ( declare-const _155 Int ) ( assert ( = _155 ( ite ( < _139 0 ) 1 0 ) ) ) ( declare-const _164 Int ) ( assert ( = _164 ( ite ( = _155 0 ) 1 0 ) ) ) ( declare-const _178 Int ) ( declare-const _190 Int ) ( assert ( = _190 ( ite ( < _139 _178 ) 1 0 ) ) ) ( declare-const _195 Int ) ( assert ( = _195 ( ite ( = _190 0 ) 1 0 ) ) ) ( declare-const _204 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( not ( = _110 0 ) ) ) ( assert ( not ( = _164 0 ) ) ) ( assert ( not ( = _195 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> call withdraw _87 ~> call send _87 ~> ret send () ~> ret withdraw () ~> call withdraw _178 ~> call send _178 ~> call withdraw _204
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _180 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _99 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _156 |-> _55 < _141
      _165 |-> not _156
      _192 |-> _55 < _180
      _196 |-> not _192
      funds |-> _55
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _141 Int ) ( declare-const _156 Int ) ( assert ( = _156 ( ite ( < _55 _141 ) 1 0 ) ) ) ( declare-const _165 Int ) ( assert ( = _165 ( ite ( = _156 0 ) 1 0 ) ) ) ( declare-const _180 Int ) ( declare-const _192 Int ) ( assert ( = _192 ( ite ( < _55 _180 ) 1 0 ) ) ) ( declare-const _196 Int ) ( assert ( = _196 ( ite ( = _192 0 ) 1 0 ) ) ) ( declare-const _205 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( = _165 0 ) ) ( assert ( not ( = _196 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> call withdraw _141 ~> ret withdraw () ~> call withdraw _180 ~> call send _180 ~> call withdraw _205
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _214 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _99 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _156 |-> _55 < _141
      _165 |-> not _156
      _183 |-> _55 - _141
      _198 |-> _183 < 0
      _206 |-> not _198
      _219 |-> _183 < _214
      _223 |-> not _219
      funds |-> _183
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _141 Int ) ( declare-const _156 Int ) ( assert ( = _156 ( ite ( < _55 _141 ) 1 0 ) ) ) ( declare-const _165 Int ) ( assert ( = _165 ( ite ( = _156 0 ) 1 0 ) ) ) ( declare-const _170 Int ) ( declare-const _183 Int ) ( assert ( = _183 ( - _55 _141 ) ) ) ( declare-const _198 Int ) ( assert ( = _198 ( ite ( < _183 0 ) 1 0 ) ) ) ( declare-const _206 Int ) ( assert ( = _206 ( ite ( = _198 0 ) 1 0 ) ) ) ( declare-const _214 Int ) ( declare-const _219 Int ) ( assert ( = _219 ( ite ( < _183 _214 ) 1 0 ) ) ) ( declare-const _223 Int ) ( assert ( = _223 ( ite ( = _219 0 ) 1 0 ) ) ) ( declare-const _226 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( not ( = _165 0 ) ) ) ( assert ( not ( = _206 0 ) ) ) ( assert ( not ( = _223 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> call withdraw _141 ~> call send _141 ~> ret send () ~> ret withdraw () ~> call withdraw _214 ~> call send _214 ~> call withdraw _226
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _53 |-> _7 - _22
      _74 |-> _53 < 0
      _85 |-> not _74
      funds |-> _53
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _43 Int ) ( declare-const _53 Int ) ( assert ( = _53 ( - _7 _22 ) ) ) ( declare-const _74 Int ) ( assert ( = _74 ( ite ( < _53 0 ) 1 0 ) ) ) ( declare-const _85 Int ) ( assert ( = _85 ( ite ( = _74 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( not ( = _85 0 ) ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _58 |-> _7 < _46
      _69 |-> not _58
      _89 |-> _7 - _46
      _111 |-> _89 < 0
      _123 |-> not _111
      _147 |-> _89 - _22
      _167 |-> _147 < 0
      _175 |-> not _167
      funds |-> _147
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _46 Int ) ( declare-const _58 Int ) ( assert ( = _58 ( ite ( < _7 _46 ) 1 0 ) ) ) ( declare-const _69 Int ) ( assert ( = _69 ( ite ( = _58 0 ) 1 0 ) ) ) ( declare-const _75 Int ) ( declare-const _89 Int ) ( assert ( = _89 ( - _7 _46 ) ) ) ( declare-const _111 Int ) ( assert ( = _111 ( ite ( < _89 0 ) 1 0 ) ) ) ( declare-const _123 Int ) ( assert ( = _123 ( ite ( = _111 0 ) 1 0 ) ) ) ( declare-const _132 Int ) ( declare-const _147 Int ) ( assert ( = _147 ( - _89 _22 ) ) ) ( declare-const _167 Int ) ( assert ( = _167 ( ite ( < _147 0 ) 1 0 ) ) ) ( declare-const _175 Int ) ( assert ( = _175 ( ite ( = _167 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( not ( = _69 0 ) ) ) ( assert ( not ( = _123 0 ) ) ) ( assert ( not ( = _175 0 ) ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> call withdraw _46 ~> call send _46 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _58 |-> _7 < _46
      _69 |-> not _58
      _95 |-> _7 - _22
      _115 |-> _95 < 0
      _128 |-> not _115
      funds |-> _95
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _46 Int ) ( declare-const _58 Int ) ( assert ( = _58 ( ite ( < _7 _46 ) 1 0 ) ) ) ( declare-const _69 Int ) ( assert ( = _69 ( ite ( = _58 0 ) 1 0 ) ) ) ( declare-const _79 Int ) ( declare-const _95 Int ) ( assert ( = _95 ( - _7 _22 ) ) ) ( declare-const _115 Int ) ( assert ( = _115 ( ite ( < _95 0 ) 1 0 ) ) ) ( declare-const _128 Int ) ( assert ( = _128 ( ite ( = _115 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( = _69 0 ) ) ( assert ( not ( = _128 0 ) ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> call withdraw _46 ~> ret withdraw () ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      funds |-> _7
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( = _41 0 ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _149 |-> _55 - _99
      _169 |-> _149 < 0
      _179 |-> not _169
      funds |-> _149
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _133 Int ) ( declare-const _149 Int ) ( assert ( = _149 ( - _55 _99 ) ) ) ( declare-const _169 Int ) ( assert ( = _169 ( ite ( < _149 0 ) 1 0 ) ) ) ( declare-const _179 Int ) ( assert ( = _179 ( ite ( = _169 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( not ( = _179 0 ) ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _156 |-> _55 < _141
      _165 |-> not _156
      _183 |-> _55 - _141
      _198 |-> _183 < 0
      _206 |-> not _198
      _215 |-> _183 - _99
      _224 |-> _215 < 0
      _227 |-> not _224
      funds |-> _215
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _141 Int ) ( declare-const _156 Int ) ( assert ( = _156 ( ite ( < _55 _141 ) 1 0 ) ) ) ( declare-const _165 Int ) ( assert ( = _165 ( ite ( = _156 0 ) 1 0 ) ) ) ( declare-const _170 Int ) ( declare-const _183 Int ) ( assert ( = _183 ( - _55 _141 ) ) ) ( declare-const _198 Int ) ( assert ( = _198 ( ite ( < _183 0 ) 1 0 ) ) ) ( declare-const _206 Int ) ( assert ( = _206 ( ite ( = _198 0 ) 1 0 ) ) ) ( declare-const _209 Int ) ( declare-const _215 Int ) ( assert ( = _215 ( - _183 _99 ) ) ) ( declare-const _224 Int ) ( assert ( = _224 ( ite ( < _215 0 ) 1 0 ) ) ) ( declare-const _227 Int ) ( assert ( = _227 ( ite ( = _224 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( not ( = _165 0 ) ) ) ( assert ( not ( = _206 0 ) ) ) ( assert ( not ( = _227 0 ) ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> call withdraw _141 ~> call send _141 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _156 |-> _55 < _141
      _165 |-> not _156
      _187 |-> _55 - _99
      _201 |-> _187 < 0
      _208 |-> not _201
      funds |-> _187
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _141 Int ) ( declare-const _156 Int ) ( assert ( = _156 ( ite ( < _55 _141 ) 1 0 ) ) ) ( declare-const _165 Int ) ( assert ( = _165 ( ite ( = _156 0 ) 1 0 ) ) ) ( declare-const _173 Int ) ( declare-const _187 Int ) ( assert ( = _187 ( - _55 _99 ) ) ) ( declare-const _201 Int ) ( assert ( = _201 ( ite ( < _187 0 ) 1 0 ) ) ) ( declare-const _208 Int ) ( assert ( = _208 ( ite ( = _201 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( = _165 0 ) ) ( assert ( not ( = _208 0 ) ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> call withdraw _141 ~> ret withdraw () ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      funds |-> _55
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( = _131 0 ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _97 |-> _23 - _50
      _117 |-> _97 < 0
      _129 |-> not _117
      funds |-> _97
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _81 Int ) ( declare-const _97 Int ) ( assert ( = _97 ( - _23 _50 ) ) ) ( declare-const _117 Int ) ( assert ( = _117 ( ite ( < _97 0 ) 1 0 ) ) ) ( declare-const _129 Int ) ( assert ( = _129 ( ite ( = _117 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( not ( = _129 0 ) ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _105 |-> _23 < _87
      _110 |-> not _105
      _139 |-> _23 - _87
      _155 |-> _139 < 0
      _164 |-> not _155
      _185 |-> _139 - _50
      _199 |-> _185 < 0
      _207 |-> not _199
      funds |-> _185
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _87 Int ) ( declare-const _105 Int ) ( assert ( = _105 ( ite ( < _23 _87 ) 1 0 ) ) ) ( declare-const _110 Int ) ( assert ( = _110 ( ite ( = _105 0 ) 1 0 ) ) ) ( declare-const _118 Int ) ( declare-const _139 Int ) ( assert ( = _139 ( - _23 _87 ) ) ) ( declare-const _155 Int ) ( assert ( = _155 ( ite ( < _139 0 ) 1 0 ) ) ) ( declare-const _164 Int ) ( assert ( = _164 ( ite ( = _155 0 ) 1 0 ) ) ) ( declare-const _172 Int ) ( declare-const _185 Int ) ( assert ( = _185 ( - _139 _50 ) ) ) ( declare-const _199 Int ) ( assert ( = _199 ( ite ( < _185 0 ) 1 0 ) ) ) ( declare-const _207 Int ) ( assert ( = _207 ( ite ( = _199 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( not ( = _110 0 ) ) ) ( assert ( not ( = _164 0 ) ) ) ( assert ( not ( = _207 0 ) ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> call withdraw _87 ~> call send _87 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _105 |-> _23 < _87
      _110 |-> not _105
      _142 |-> _23 - _50
      _158 |-> _142 < 0
      _166 |-> not _158
      funds |-> _142
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _87 Int ) ( declare-const _105 Int ) ( assert ( = _105 ( ite ( < _23 _87 ) 1 0 ) ) ) ( declare-const _110 Int ) ( assert ( = _110 ( ite ( = _105 0 ) 1 0 ) ) ) ( declare-const _124 Int ) ( declare-const _142 Int ) ( assert ( = _142 ( - _23 _50 ) ) ) ( declare-const _158 Int ) ( assert ( = _158 ( ite ( < _142 0 ) 1 0 ) ) ) ( declare-const _166 Int ) ( assert ( = _166 ( ite ( = _158 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( = _110 0 ) ) ( assert ( not ( = _166 0 ) ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> call withdraw _87 ~> ret withdraw () ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      funds |-> _23
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( = _73 0 ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _21 |-> 100 - _6
      _29 |-> _21 < 0
      _39 |-> not _29
      funds |-> _21
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _14 Int ) ( declare-const _21 Int ) ( assert ( = _21 ( - 100 _6 ) ) ) ( declare-const _29 Int ) ( assert ( = _29 ( ite ( < _21 0 ) 1 0 ) ) ) ( declare-const _39 Int ) ( assert ( = _39 ( ite ( = _29 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( not ( = _39 0 ) ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _24 |-> 100 < _17
      _26 |-> not _24
      _45 |-> 100 - _17
      _57 |-> _45 < 0
      _68 |-> not _57
      _93 |-> _45 - _6
      _113 |-> _93 < 0
      _127 |-> not _113
      funds |-> _93
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( < 100 _17 ) 1 0 ) ) ) ( declare-const _26 Int ) ( assert ( = _26 ( ite ( = _24 0 ) 1 0 ) ) ) ( declare-const _30 Int ) ( declare-const _45 Int ) ( assert ( = _45 ( - 100 _17 ) ) ) ( declare-const _57 Int ) ( assert ( = _57 ( ite ( < _45 0 ) 1 0 ) ) ) ( declare-const _68 Int ) ( assert ( = _68 ( ite ( = _57 0 ) 1 0 ) ) ) ( declare-const _78 Int ) ( declare-const _93 Int ) ( assert ( = _93 ( - _45 _6 ) ) ) ( declare-const _113 Int ) ( assert ( = _113 ( ite ( < _93 0 ) 1 0 ) ) ) ( declare-const _127 Int ) ( assert ( = _127 ( ite ( = _113 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( not ( = _26 0 ) ) ) ( assert ( not ( = _68 0 ) ) ) ( assert ( not ( = _127 0 ) ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> call withdraw _17 ~> call send _17 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _24 |-> 100 < _17
      _26 |-> not _24
      _49 |-> 100 - _6
      _63 |-> _49 < 0
      _72 |-> not _63
      funds |-> _49
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( < 100 _17 ) 1 0 ) ) ) ( declare-const _26 Int ) ( assert ( = _26 ( ite ( = _24 0 ) 1 0 ) ) ) ( declare-const _35 Int ) ( declare-const _49 Int ) ( assert ( = _49 ( - 100 _6 ) ) ) ( declare-const _63 Int ) ( assert ( = _63 ( ite ( < _49 0 ) 1 0 ) ) ) ( declare-const _72 Int ) ( assert ( = _72 ( ite ( = _63 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( = _26 0 ) ) ( assert ( not ( = _72 0 ) ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> call withdraw _17 ~> ret withdraw () ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( = _11 0 ) )
    </pc>
    <kbound>
      3
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _61 |-> _20 < _48
      _71 |-> not _61
      _91 |-> _20 - _48
      _112 |-> _91 < 0
      _126 |-> not _112
      funds |-> _91
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _48 Int ) ( declare-const _61 Int ) ( assert ( = _61 ( ite ( < _20 _48 ) 1 0 ) ) ) ( declare-const _71 Int ) ( assert ( = _71 ( ite ( = _61 0 ) 1 0 ) ) ) ( declare-const _77 Int ) ( declare-const _91 Int ) ( assert ( = _91 ( - _20 _48 ) ) ) ( declare-const _112 Int ) ( assert ( = _112 ( ite ( < _91 0 ) 1 0 ) ) ) ( declare-const _126 Int ) ( assert ( = _126 ( ite ( = _112 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _71 0 ) ) ) ( assert ( not ( = _126 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> call withdraw _48 ~> call send _48 ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _61 |-> _20 < _48
      _71 |-> not _61
      funds |-> _20
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _48 Int ) ( declare-const _61 Int ) ( assert ( = _61 ( ite ( < _20 _48 ) 1 0 ) ) ) ( declare-const _71 Int ) ( assert ( = _71 ( ite ( = _61 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( = _71 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> call withdraw _48 ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _25 |-> 100 < _19
      _27 |-> not _25
      _47 |-> 100 - _19
      _60 |-> _47 < 0
      _70 |-> not _60
      funds |-> _47
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _19 Int ) ( declare-const _25 Int ) ( assert ( = _25 ( ite ( < 100 _19 ) 1 0 ) ) ) ( declare-const _27 Int ) ( assert ( = _27 ( ite ( = _25 0 ) 1 0 ) ) ) ( declare-const _34 Int ) ( declare-const _47 Int ) ( assert ( = _47 ( - 100 _19 ) ) ) ( declare-const _60 Int ) ( assert ( = _60 ( ite ( < _47 0 ) 1 0 ) ) ) ( declare-const _70 Int ) ( assert ( = _70 ( ite ( = _60 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _27 0 ) ) ) ( assert ( not ( = _70 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> call withdraw _19 ~> call send _19 ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _25 |-> 100 < _19
      _27 |-> not _25
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _19 Int ) ( declare-const _25 Int ) ( assert ( = _25 ( ite ( < 100 _19 ) 1 0 ) ) ) ( declare-const _27 Int ) ( assert ( = _27 ( ite ( = _25 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( = _27 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> call withdraw _19 ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _6 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _24 |-> 100 < _17
      _26 |-> not _24
      _45 |-> 100 - _17
      _57 |-> _45 < 0
      _68 |-> not _57
      _101 |-> _45 < _84
      _108 |-> not _101
      _134 |-> _45 - _84
      _151 |-> _134 < 0
      _160 |-> not _151
      funds |-> _134
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( < 100 _17 ) 1 0 ) ) ) ( declare-const _26 Int ) ( assert ( = _26 ( ite ( = _24 0 ) 1 0 ) ) ) ( declare-const _30 Int ) ( declare-const _45 Int ) ( assert ( = _45 ( - 100 _17 ) ) ) ( declare-const _57 Int ) ( assert ( = _57 ( ite ( < _45 0 ) 1 0 ) ) ) ( declare-const _68 Int ) ( assert ( = _68 ( ite ( = _57 0 ) 1 0 ) ) ) ( declare-const _84 Int ) ( declare-const _101 Int ) ( assert ( = _101 ( ite ( < _45 _84 ) 1 0 ) ) ) ( declare-const _108 Int ) ( assert ( = _108 ( ite ( = _101 0 ) 1 0 ) ) ) ( declare-const _114 Int ) ( declare-const _134 Int ) ( assert ( = _134 ( - _45 _84 ) ) ) ( declare-const _151 Int ) ( assert ( = _151 ( ite ( < _134 0 ) 1 0 ) ) ) ( declare-const _160 Int ) ( assert ( = _160 ( ite ( = _151 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( not ( = _26 0 ) ) ) ( assert ( not ( = _68 0 ) ) ) ( assert ( not ( = _108 0 ) ) ) ( assert ( not ( = _160 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> call withdraw _17 ~> call send _17 ~> ret send () ~> ret withdraw () ~> call withdraw _84 ~> call send _84 ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _6 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _24 |-> 100 < _17
      _26 |-> not _24
      _45 |-> 100 - _17
      _57 |-> _45 < 0
      _68 |-> not _57
      _101 |-> _45 < _84
      _108 |-> not _101
      funds |-> _45
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( < 100 _17 ) 1 0 ) ) ) ( declare-const _26 Int ) ( assert ( = _26 ( ite ( = _24 0 ) 1 0 ) ) ) ( declare-const _30 Int ) ( declare-const _45 Int ) ( assert ( = _45 ( - 100 _17 ) ) ) ( declare-const _57 Int ) ( assert ( = _57 ( ite ( < _45 0 ) 1 0 ) ) ) ( declare-const _68 Int ) ( assert ( = _68 ( ite ( = _57 0 ) 1 0 ) ) ) ( declare-const _84 Int ) ( declare-const _101 Int ) ( assert ( = _101 ( ite ( < _45 _84 ) 1 0 ) ) ) ( declare-const _108 Int ) ( assert ( = _108 ( ite ( = _101 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( not ( = _26 0 ) ) ) ( assert ( not ( = _68 0 ) ) ) ( assert ( = _108 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> call withdraw _17 ~> call send _17 ~> ret send () ~> ret withdraw () ~> call withdraw _84 ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _6 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _24 |-> 100 < _17
      _26 |-> not _24
      _51 |-> 100 < _40
      _52 |-> not _51
      _83 |-> 100 - _40
      _100 |-> _83 < 0
      _107 |-> not _100
      funds |-> _83
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( < 100 _17 ) 1 0 ) ) ) ( declare-const _26 Int ) ( assert ( = _26 ( ite ( = _24 0 ) 1 0 ) ) ) ( declare-const _40 Int ) ( declare-const _51 Int ) ( assert ( = _51 ( ite ( < 100 _40 ) 1 0 ) ) ) ( declare-const _52 Int ) ( assert ( = _52 ( ite ( = _51 0 ) 1 0 ) ) ) ( declare-const _64 Int ) ( declare-const _83 Int ) ( assert ( = _83 ( - 100 _40 ) ) ) ( declare-const _100 Int ) ( assert ( = _100 ( ite ( < _83 0 ) 1 0 ) ) ) ( declare-const _107 Int ) ( assert ( = _107 ( ite ( = _100 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( = _26 0 ) ) ( assert ( not ( = _52 0 ) ) ) ( assert ( not ( = _107 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> call withdraw _17 ~> ret withdraw () ~> call withdraw _40 ~> call send _40 ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _6 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _9 |-> 100 < _6
      _11 |-> not _9
      _24 |-> 100 < _17
      _26 |-> not _24
      _51 |-> 100 < _40
      _52 |-> not _51
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( declare-const _9 Int ) ( assert ( = _9 ( ite ( < 100 _6 ) 1 0 ) ) ) ( declare-const _11 Int ) ( assert ( = _11 ( ite ( = _9 0 ) 1 0 ) ) ) ( declare-const _17 Int ) ( declare-const _24 Int ) ( assert ( = _24 ( ite ( < 100 _17 ) 1 0 ) ) ) ( declare-const _26 Int ) ( assert ( = _26 ( ite ( = _24 0 ) 1 0 ) ) ) ( declare-const _40 Int ) ( declare-const _51 Int ) ( assert ( = _51 ( ite ( < 100 _40 ) 1 0 ) ) ) ( declare-const _52 Int ) ( assert ( = _52 ( ite ( = _51 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _3 0 ) ) ( assert ( not ( = _11 0 ) ) ) ( assert ( = _26 0 ) ) ( assert ( = _52 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> ret withdraw () ~> call withdraw _6 ~> call send _6 ~> call withdraw _17 ~> ret withdraw () ~> call withdraw _40 ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _22 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _58 |-> _7 < _46
      _69 |-> not _58
      _89 |-> _7 - _46
      _111 |-> _89 < 0
      _123 |-> not _111
      _153 |-> _89 < _138
      _162 |-> not _153
      _181 |-> _89 - _138
      _197 |-> _181 < 0
      _203 |-> not _197
      funds |-> _181
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _46 Int ) ( declare-const _58 Int ) ( assert ( = _58 ( ite ( < _7 _46 ) 1 0 ) ) ) ( declare-const _69 Int ) ( assert ( = _69 ( ite ( = _58 0 ) 1 0 ) ) ) ( declare-const _75 Int ) ( declare-const _89 Int ) ( assert ( = _89 ( - _7 _46 ) ) ) ( declare-const _111 Int ) ( assert ( = _111 ( ite ( < _89 0 ) 1 0 ) ) ) ( declare-const _123 Int ) ( assert ( = _123 ( ite ( = _111 0 ) 1 0 ) ) ) ( declare-const _138 Int ) ( declare-const _153 Int ) ( assert ( = _153 ( ite ( < _89 _138 ) 1 0 ) ) ) ( declare-const _162 Int ) ( assert ( = _162 ( ite ( = _153 0 ) 1 0 ) ) ) ( declare-const _168 Int ) ( declare-const _181 Int ) ( assert ( = _181 ( - _89 _138 ) ) ) ( declare-const _197 Int ) ( assert ( = _197 ( ite ( < _181 0 ) 1 0 ) ) ) ( declare-const _203 Int ) ( assert ( = _203 ( ite ( = _197 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( not ( = _69 0 ) ) ) ( assert ( not ( = _123 0 ) ) ) ( assert ( not ( = _162 0 ) ) ) ( assert ( not ( = _203 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> call withdraw _46 ~> call send _46 ~> ret send () ~> ret withdraw () ~> call withdraw _138 ~> call send _138 ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _22 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _58 |-> _7 < _46
      _69 |-> not _58
      _89 |-> _7 - _46
      _111 |-> _89 < 0
      _123 |-> not _111
      _153 |-> _89 < _138
      _162 |-> not _153
      funds |-> _89
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _46 Int ) ( declare-const _58 Int ) ( assert ( = _58 ( ite ( < _7 _46 ) 1 0 ) ) ) ( declare-const _69 Int ) ( assert ( = _69 ( ite ( = _58 0 ) 1 0 ) ) ) ( declare-const _75 Int ) ( declare-const _89 Int ) ( assert ( = _89 ( - _7 _46 ) ) ) ( declare-const _111 Int ) ( assert ( = _111 ( ite ( < _89 0 ) 1 0 ) ) ) ( declare-const _123 Int ) ( assert ( = _123 ( ite ( = _111 0 ) 1 0 ) ) ) ( declare-const _138 Int ) ( declare-const _153 Int ) ( assert ( = _153 ( ite ( < _89 _138 ) 1 0 ) ) ) ( declare-const _162 Int ) ( assert ( = _162 ( ite ( = _153 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( not ( = _69 0 ) ) ) ( assert ( not ( = _123 0 ) ) ) ( assert ( = _162 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> call withdraw _46 ~> call send _46 ~> ret send () ~> ret withdraw () ~> call withdraw _138 ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _22 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _58 |-> _7 < _46
      _69 |-> not _58
      _103 |-> _7 < _86
      _109 |-> not _103
      _136 |-> _7 - _86
      _152 |-> _136 < 0
      _161 |-> not _152
      funds |-> _136
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _46 Int ) ( declare-const _58 Int ) ( assert ( = _58 ( ite ( < _7 _46 ) 1 0 ) ) ) ( declare-const _69 Int ) ( assert ( = _69 ( ite ( = _58 0 ) 1 0 ) ) ) ( declare-const _86 Int ) ( declare-const _103 Int ) ( assert ( = _103 ( ite ( < _7 _86 ) 1 0 ) ) ) ( declare-const _109 Int ) ( assert ( = _109 ( ite ( = _103 0 ) 1 0 ) ) ) ( declare-const _116 Int ) ( declare-const _136 Int ) ( assert ( = _136 ( - _7 _86 ) ) ) ( declare-const _152 Int ) ( assert ( = _152 ( ite ( < _136 0 ) 1 0 ) ) ) ( declare-const _161 Int ) ( assert ( = _161 ( ite ( = _152 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( = _69 0 ) ) ( assert ( not ( = _109 0 ) ) ) ( assert ( not ( = _161 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> call withdraw _46 ~> ret withdraw () ~> call withdraw _86 ~> call send _86 ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _22 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _7 |-> 100 - _1
      _12 |-> _7 < 0
      _18 |-> not _12
      _31 |-> _7 < _22
      _41 |-> not _31
      _58 |-> _7 < _46
      _69 |-> not _58
      _103 |-> _7 < _86
      _109 |-> not _103
      funds |-> _7
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _4 Int ) ( declare-const _7 Int ) ( assert ( = _7 ( - 100 _1 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _7 0 ) 1 0 ) ) ) ( declare-const _18 Int ) ( assert ( = _18 ( ite ( = _12 0 ) 1 0 ) ) ) ( declare-const _22 Int ) ( declare-const _31 Int ) ( assert ( = _31 ( ite ( < _7 _22 ) 1 0 ) ) ) ( declare-const _41 Int ) ( assert ( = _41 ( ite ( = _31 0 ) 1 0 ) ) ) ( declare-const _46 Int ) ( declare-const _58 Int ) ( assert ( = _58 ( ite ( < _7 _46 ) 1 0 ) ) ) ( declare-const _69 Int ) ( assert ( = _69 ( ite ( = _58 0 ) 1 0 ) ) ) ( declare-const _86 Int ) ( declare-const _103 Int ) ( assert ( = _103 ( ite ( < _7 _86 ) 1 0 ) ) ) ( declare-const _109 Int ) ( assert ( = _109 ( ite ( = _103 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _18 0 ) ) ) ( assert ( not ( = _41 0 ) ) ) ( assert ( = _69 0 ) ) ( assert ( = _109 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> ret send () ~> ret withdraw () ~> call withdraw _22 ~> call send _22 ~> call withdraw _46 ~> ret withdraw () ~> call withdraw _86 ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _50 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _105 |-> _23 < _87
      _110 |-> not _105
      _139 |-> _23 - _87
      _155 |-> _139 < 0
      _164 |-> not _155
      _190 |-> _139 < _178
      _195 |-> not _190
      _210 |-> _139 - _178
      _217 |-> _210 < 0
      _221 |-> not _217
      funds |-> _210
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _87 Int ) ( declare-const _105 Int ) ( assert ( = _105 ( ite ( < _23 _87 ) 1 0 ) ) ) ( declare-const _110 Int ) ( assert ( = _110 ( ite ( = _105 0 ) 1 0 ) ) ) ( declare-const _118 Int ) ( declare-const _139 Int ) ( assert ( = _139 ( - _23 _87 ) ) ) ( declare-const _155 Int ) ( assert ( = _155 ( ite ( < _139 0 ) 1 0 ) ) ) ( declare-const _164 Int ) ( assert ( = _164 ( ite ( = _155 0 ) 1 0 ) ) ) ( declare-const _178 Int ) ( declare-const _190 Int ) ( assert ( = _190 ( ite ( < _139 _178 ) 1 0 ) ) ) ( declare-const _195 Int ) ( assert ( = _195 ( ite ( = _190 0 ) 1 0 ) ) ) ( declare-const _200 Int ) ( declare-const _210 Int ) ( assert ( = _210 ( - _139 _178 ) ) ) ( declare-const _217 Int ) ( assert ( = _217 ( ite ( < _210 0 ) 1 0 ) ) ) ( declare-const _221 Int ) ( assert ( = _221 ( ite ( = _217 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( not ( = _110 0 ) ) ) ( assert ( not ( = _164 0 ) ) ) ( assert ( not ( = _195 0 ) ) ) ( assert ( not ( = _221 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> call withdraw _87 ~> call send _87 ~> ret send () ~> ret withdraw () ~> call withdraw _178 ~> call send _178 ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _50 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _105 |-> _23 < _87
      _110 |-> not _105
      _139 |-> _23 - _87
      _155 |-> _139 < 0
      _164 |-> not _155
      _190 |-> _139 < _178
      _195 |-> not _190
      funds |-> _139
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _87 Int ) ( declare-const _105 Int ) ( assert ( = _105 ( ite ( < _23 _87 ) 1 0 ) ) ) ( declare-const _110 Int ) ( assert ( = _110 ( ite ( = _105 0 ) 1 0 ) ) ) ( declare-const _118 Int ) ( declare-const _139 Int ) ( assert ( = _139 ( - _23 _87 ) ) ) ( declare-const _155 Int ) ( assert ( = _155 ( ite ( < _139 0 ) 1 0 ) ) ) ( declare-const _164 Int ) ( assert ( = _164 ( ite ( = _155 0 ) 1 0 ) ) ) ( declare-const _178 Int ) ( declare-const _190 Int ) ( assert ( = _190 ( ite ( < _139 _178 ) 1 0 ) ) ) ( declare-const _195 Int ) ( assert ( = _195 ( ite ( = _190 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( not ( = _110 0 ) ) ) ( assert ( not ( = _164 0 ) ) ) ( assert ( = _195 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> call withdraw _87 ~> call send _87 ~> ret send () ~> ret withdraw () ~> call withdraw _178 ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _50 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _105 |-> _23 < _87
      _110 |-> not _105
      _144 |-> _23 < _130
      _146 |-> not _144
      _176 |-> _23 - _130
      _189 |-> _176 < 0
      _194 |-> not _189
      funds |-> _176
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _87 Int ) ( declare-const _105 Int ) ( assert ( = _105 ( ite ( < _23 _87 ) 1 0 ) ) ) ( declare-const _110 Int ) ( assert ( = _110 ( ite ( = _105 0 ) 1 0 ) ) ) ( declare-const _130 Int ) ( declare-const _144 Int ) ( assert ( = _144 ( ite ( < _23 _130 ) 1 0 ) ) ) ( declare-const _146 Int ) ( assert ( = _146 ( ite ( = _144 0 ) 1 0 ) ) ) ( declare-const _159 Int ) ( declare-const _176 Int ) ( assert ( = _176 ( - _23 _130 ) ) ) ( declare-const _189 Int ) ( assert ( = _189 ( ite ( < _176 0 ) 1 0 ) ) ) ( declare-const _194 Int ) ( assert ( = _194 ( ite ( = _189 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( = _110 0 ) ) ( assert ( not ( = _146 0 ) ) ) ( assert ( not ( = _194 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> call withdraw _87 ~> ret withdraw () ~> call withdraw _130 ~> call send _130 ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _50 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _23 |-> 100 - _1
      _33 |-> _23 < 0
      _42 |-> not _33
      _65 |-> _23 < _50
      _73 |-> not _65
      _105 |-> _23 < _87
      _110 |-> not _105
      _144 |-> _23 < _130
      _146 |-> not _144
      funds |-> _23
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _15 Int ) ( declare-const _23 Int ) ( assert ( = _23 ( - 100 _1 ) ) ) ( declare-const _33 Int ) ( assert ( = _33 ( ite ( < _23 0 ) 1 0 ) ) ) ( declare-const _42 Int ) ( assert ( = _42 ( ite ( = _33 0 ) 1 0 ) ) ) ( declare-const _50 Int ) ( declare-const _65 Int ) ( assert ( = _65 ( ite ( < _23 _50 ) 1 0 ) ) ) ( declare-const _73 Int ) ( assert ( = _73 ( ite ( = _65 0 ) 1 0 ) ) ) ( declare-const _87 Int ) ( declare-const _105 Int ) ( assert ( = _105 ( ite ( < _23 _87 ) 1 0 ) ) ) ( declare-const _110 Int ) ( assert ( = _110 ( ite ( = _105 0 ) 1 0 ) ) ) ( declare-const _130 Int ) ( declare-const _144 Int ) ( assert ( = _144 ( ite ( < _23 _130 ) 1 0 ) ) ) ( declare-const _146 Int ) ( assert ( = _146 ( ite ( = _144 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( = _10 0 ) ) ( assert ( not ( = _42 0 ) ) ) ( assert ( not ( = _73 0 ) ) ) ( assert ( = _110 0 ) ) ( assert ( = _146 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _50 ~> call send _50 ~> call withdraw _87 ~> ret withdraw () ~> call withdraw _130 ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _99 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _156 |-> _55 < _141
      _165 |-> not _156
      _183 |-> _55 - _141
      _198 |-> _183 < 0
      _206 |-> not _198
      _219 |-> _183 < _214
      _223 |-> not _219
      _228 |-> _183 - _214
      _230 |-> _228 < 0
      _231 |-> not _230
      funds |-> _228
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _141 Int ) ( declare-const _156 Int ) ( assert ( = _156 ( ite ( < _55 _141 ) 1 0 ) ) ) ( declare-const _165 Int ) ( assert ( = _165 ( ite ( = _156 0 ) 1 0 ) ) ) ( declare-const _170 Int ) ( declare-const _183 Int ) ( assert ( = _183 ( - _55 _141 ) ) ) ( declare-const _198 Int ) ( assert ( = _198 ( ite ( < _183 0 ) 1 0 ) ) ) ( declare-const _206 Int ) ( assert ( = _206 ( ite ( = _198 0 ) 1 0 ) ) ) ( declare-const _214 Int ) ( declare-const _219 Int ) ( assert ( = _219 ( ite ( < _183 _214 ) 1 0 ) ) ) ( declare-const _223 Int ) ( assert ( = _223 ( ite ( = _219 0 ) 1 0 ) ) ) ( declare-const _225 Int ) ( declare-const _228 Int ) ( assert ( = _228 ( - _183 _214 ) ) ) ( declare-const _230 Int ) ( assert ( = _230 ( ite ( < _228 0 ) 1 0 ) ) ) ( declare-const _231 Int ) ( assert ( = _231 ( ite ( = _230 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( not ( = _165 0 ) ) ) ( assert ( not ( = _206 0 ) ) ) ( assert ( not ( = _223 0 ) ) ) ( assert ( not ( = _231 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> call withdraw _141 ~> call send _141 ~> ret send () ~> ret withdraw () ~> call withdraw _214 ~> call send _214 ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _99 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _156 |-> _55 < _141
      _165 |-> not _156
      _183 |-> _55 - _141
      _198 |-> _183 < 0
      _206 |-> not _198
      _219 |-> _183 < _214
      _223 |-> not _219
      funds |-> _183
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _141 Int ) ( declare-const _156 Int ) ( assert ( = _156 ( ite ( < _55 _141 ) 1 0 ) ) ) ( declare-const _165 Int ) ( assert ( = _165 ( ite ( = _156 0 ) 1 0 ) ) ) ( declare-const _170 Int ) ( declare-const _183 Int ) ( assert ( = _183 ( - _55 _141 ) ) ) ( declare-const _198 Int ) ( assert ( = _198 ( ite ( < _183 0 ) 1 0 ) ) ) ( declare-const _206 Int ) ( assert ( = _206 ( ite ( = _198 0 ) 1 0 ) ) ) ( declare-const _214 Int ) ( declare-const _219 Int ) ( assert ( = _219 ( ite ( < _183 _214 ) 1 0 ) ) ) ( declare-const _223 Int ) ( assert ( = _223 ( ite ( = _219 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( not ( = _165 0 ) ) ) ( assert ( not ( = _206 0 ) ) ) ( assert ( = _223 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> call withdraw _141 ~> call send _141 ~> ret send () ~> ret withdraw () ~> call withdraw _214 ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _99 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _156 |-> _55 < _141
      _165 |-> not _156
      _192 |-> _55 < _180
      _196 |-> not _192
      _212 |-> _55 - _180
      _218 |-> _212 < 0
      _222 |-> not _218
      funds |-> _212
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _141 Int ) ( declare-const _156 Int ) ( assert ( = _156 ( ite ( < _55 _141 ) 1 0 ) ) ) ( declare-const _165 Int ) ( assert ( = _165 ( ite ( = _156 0 ) 1 0 ) ) ) ( declare-const _180 Int ) ( declare-const _192 Int ) ( assert ( = _192 ( ite ( < _55 _180 ) 1 0 ) ) ) ( declare-const _196 Int ) ( assert ( = _196 ( ite ( = _192 0 ) 1 0 ) ) ) ( declare-const _202 Int ) ( declare-const _212 Int ) ( assert ( = _212 ( - _55 _180 ) ) ) ( declare-const _218 Int ) ( assert ( = _218 ( ite ( < _212 0 ) 1 0 ) ) ) ( declare-const _222 Int ) ( assert ( = _222 ( ite ( = _218 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( = _165 0 ) ) ( assert ( not ( = _196 0 ) ) ) ( assert ( not ( = _222 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> call withdraw _141 ~> ret withdraw () ~> call withdraw _180 ~> call send _180 ~> ret send () ~> ret withdraw ()
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _99 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> if not ( ! funds < m ) then send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) else ()
    </repo>
    <state>
      _2 |-> 100 < _1
      _3 |-> not _2
      _8 |-> 100 < _5
      _10 |-> not _8
      _20 |-> 100 - _5
      _28 |-> _20 < 0
      _38 |-> not _28
      _55 |-> _20 - _1
      _76 |-> _55 < 0
      _88 |-> not _76
      _119 |-> _55 < _99
      _131 |-> not _119
      _156 |-> _55 < _141
      _165 |-> not _156
      _192 |-> _55 < _180
      _196 |-> not _192
      funds |-> _55
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( assert ( = _2 ( ite ( < 100 _1 ) 1 0 ) ) ) ( declare-const _3 Int ) ( assert ( = _3 ( ite ( = _2 0 ) 1 0 ) ) ) ( declare-const _5 Int ) ( declare-const _8 Int ) ( assert ( = _8 ( ite ( < 100 _5 ) 1 0 ) ) ) ( declare-const _10 Int ) ( assert ( = _10 ( ite ( = _8 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( declare-const _20 Int ) ( assert ( = _20 ( - 100 _5 ) ) ) ( declare-const _28 Int ) ( assert ( = _28 ( ite ( < _20 0 ) 1 0 ) ) ) ( declare-const _38 Int ) ( assert ( = _38 ( ite ( = _28 0 ) 1 0 ) ) ) ( declare-const _44 Int ) ( declare-const _55 Int ) ( assert ( = _55 ( - _20 _1 ) ) ) ( declare-const _76 Int ) ( assert ( = _76 ( ite ( < _55 0 ) 1 0 ) ) ) ( declare-const _88 Int ) ( assert ( = _88 ( ite ( = _76 0 ) 1 0 ) ) ) ( declare-const _99 Int ) ( declare-const _119 Int ) ( assert ( = _119 ( ite ( < _55 _99 ) 1 0 ) ) ) ( declare-const _131 Int ) ( assert ( = _131 ( ite ( = _119 0 ) 1 0 ) ) ) ( declare-const _141 Int ) ( declare-const _156 Int ) ( assert ( = _156 ( ite ( < _55 _141 ) 1 0 ) ) ) ( declare-const _165 Int ) ( assert ( = _165 ( ite ( = _156 0 ) 1 0 ) ) ) ( declare-const _180 Int ) ( declare-const _192 Int ) ( assert ( = _192 ( ite ( < _55 _180 ) 1 0 ) ) ) ( declare-const _196 Int ) ( assert ( = _196 ( ite ( = _192 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _3 0 ) ) ) ( assert ( not ( = _10 0 ) ) ) ( assert ( not ( = _38 0 ) ) ) ( assert ( not ( = _88 0 ) ) ) ( assert ( not ( = _131 0 ) ) ) ( assert ( = _165 0 ) ) ( assert ( = _196 0 ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw _1 ~> call send _1 ~> call withdraw _5 ~> call send _5 ~> ret send () ~> ret withdraw () ~> ret send () ~> ret withdraw () ~> call withdraw _99 ~> call send _99 ~> call withdraw _141 ~> ret withdraw () ~> call withdraw _180 ~> ret withdraw ()
    </trace>
  </T>
