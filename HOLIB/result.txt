  Result ==K <T>
    <k>
      100 - _1 ~> #freezer_:=__HOLIB-SYNTAX0_ ( funds ) ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      100 ~> #freezer_-__HOLIB-SYNTAX1_ ( _1 ) ~> #freezer_:=__HOLIB-SYNTAX0_ ( funds ) ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      ! funds - _1 ~> #freezer_:=__HOLIB-SYNTAX0_ ( funds ) ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      ! funds - _7 ~> #freezer_:=__HOLIB-SYNTAX0_ ( funds ) ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      ! funds < 0 ~> #freezernot__HOLIB-SYNTAX0_ ( ) ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      ! funds < 0 ~> #freezernot__HOLIB-SYNTAX0_ ( ) ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      ! funds ~> #freezer_-__HOLIB-SYNTAX1_ ( _1 ) ~> #freezer_:=__HOLIB-SYNTAX0_ ( funds ) ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      ! funds ~> #freezer_-__HOLIB-SYNTAX1_ ( _7 ) ~> #freezer_:=__HOLIB-SYNTAX0_ ( funds ) ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      ! funds ~> #freezer_<__HOLIB-SYNTAX1_ ( 0 ) ~> #freezernot__HOLIB-SYNTAX0_ ( ) ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      ! funds ~> #freezer_<__HOLIB-SYNTAX1_ ( 0 ) ~> #freezernot__HOLIB-SYNTAX0_ ( ) ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      !OPPONENT!
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      _12 |-> _10 < 0
      _13 |-> not _12
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _10 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( assert ( = _13 ( ite ( = _12 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) ) ( assert ( not ( = _13 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send ~> ret withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      !OPPONENT!
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      1
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      !OPPONENT!
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      .
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      !OPPONENT!
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      !OPPONENT!
    </k>
    <eval>
      send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _7 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      # set-bounds 2 2 # import send : ( int -> unit ) public withdraw ( m : int ) : ( unit ) = { send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) } ; int funds := 100 ;
    </k>
    <eval>
      .
    </eval>
    <repo>
      .Map
    </repo>
    <state>
      .Map
    </state>
    <abs>
      .Map
    </abs>
    <pub>
      .Map
    </pub>
    <sig>
      ( assert true )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      4
    </kbound>
    <lbound>
      4
    </lbound>
    <kzero>
      4
    </kzero>
    <lzero>
      4
    </lzero>
    <trace>
      .
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      ()
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      _12 |-> _10 < 0
      _13 |-> not _12
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _10 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( assert ( = _13 ( ite ( = _12 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) ) ( assert ( not ( = _13 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      ()
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      () ; assert not ( ! funds < 0 ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      () ; assert not ( ! funds < 0 ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      () ; funds := ! funds - _1 ; assert not ( ! funds < 0 ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      () ; funds := ! funds - _7 ; assert not ( ! funds < 0 ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      () ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      () ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      () ~> #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      () ~> #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _7 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      () ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      _12 |-> _10 < 0
      _13 |-> not _12
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _10 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( assert ( = _13 ( ite ( = _12 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) ) ( assert ( not ( = _13 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      () ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _1 ~> #freezer___HOLIB-SYNTAX0_ ( withdraw )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _3 ~> #freezer___HOLIB-SYNTAX0_ ( withdraw )
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _3 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _4 - _7 ~> #freezer_:=__HOLIB-SYNTAX0_ ( funds ) ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _4 < 0 ~> #freezernot__HOLIB-SYNTAX0_ ( ) ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _4 ~> #freezer_-__HOLIB-SYNTAX1_ ( _7 ) ~> #freezer_:=__HOLIB-SYNTAX0_ ( funds ) ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _4 ~> #freezer_:=__HOLIB-SYNTAX0_ ( funds ) ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _4 ~> #freezer_<__HOLIB-SYNTAX1_ ( 0 ) ~> #freezernot__HOLIB-SYNTAX0_ ( ) ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _5 ~> #freezernot__HOLIB-SYNTAX0_ ( ) ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _6 ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _7 ~> #freezer___HOLIB-SYNTAX0_ ( withdraw )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      1
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _9 ~> #freezer___HOLIB-SYNTAX0_ ( withdraw )
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _7 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _9 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _10 < 0 ~> #freezernot__HOLIB-SYNTAX0_ ( ) ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _10 ~> #freezer_:=__HOLIB-SYNTAX0_ ( funds ) ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _10 ~> #freezer_<__HOLIB-SYNTAX1_ ( 0 ) ~> #freezernot__HOLIB-SYNTAX0_ ( ) ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _12 ~> #freezernot__HOLIB-SYNTAX0_ ( ) ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      _12 |-> _10 < 0
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _10 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      _13 ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      _12 |-> _10 < 0
      _13 |-> not _12
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _10 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( assert ( = _13 ( ite ( = _12 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      assert _6 ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      assert _13 ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      _12 |-> _10 < 0
      _13 |-> not _12
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _10 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( assert ( = _13 ( ite ( = _12 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      assert not ( ! funds < 0 ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      assert not ( ! funds < 0 ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      _12 |-> _10 < 0
      _13 |-> not _12
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _10 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( assert ( = _13 ( ite ( = _12 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) ) ( assert ( = _13 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _6 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      _12 |-> _10 < 0
      _13 |-> not _12
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _10 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( assert ( = _13 ( ite ( = _12 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) ) ( assert ( = _13 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      fail ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( = _6 0 ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      funds := ! funds - _1 ; assert not ( ! funds < 0 ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      funds := ! funds - _1 ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      funds := ! funds - _7 ; assert not ( ! funds < 0 ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      funds := ! funds - _7 ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      funds := _4 ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      funds := _10 ~> #freezer_;__HOLIB-SYNTAX1_ ( assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      import send : ( int -> unit ) public withdraw ( m : int ) : ( unit ) = { send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) } ; int funds := 100 ;
    </k>
    <eval>
      .
    </eval>
    <repo>
      .Map
    </repo>
    <state>
      .Map
    </state>
    <abs>
      .Map
    </abs>
    <pub>
      .Map
    </pub>
    <sig>
      ( assert true )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      .
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      int funds := 100 ;
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      .Map
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      .
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _3 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _7 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _9 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil
    </k>
    <eval>
      .
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      _12 |-> _10 < 0
      _13 |-> not _12
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _10 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( assert ( = _13 ( ite ( = _12 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) ) ( assert ( not ( = _13 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      0
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send ~> ret withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil ~> #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _3 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _3 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil ~> #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _9 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _7 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _9 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _3 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      nil ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _7 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _9 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      not ( ! funds < 0 ) ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      not ( ! funds < 0 ) ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      not _5 ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      not _12 ~> #freezerassert__HOLIB-SYNTAX0_ ( ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      _12 |-> _10 < 0
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _10 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      opp_val int ~> #freezer___HOLIB-SYNTAX0_ ( withdraw )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      1
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      opp_val int ~> #freezer___HOLIB-SYNTAX0_ ( withdraw )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      opp_val int ~> #freezer___HOLIB-SYNTAX0_ ( withdraw )
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      opp_val int ~> #freezer___HOLIB-SYNTAX0_ ( withdraw )
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _7 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      opp_val unit ~> #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      opp_val unit ~> #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _7 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      public withdraw ( m : int ) : ( unit ) = { send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) } ; int funds := 100 ;
    </k>
    <eval>
      .
    </eval>
    <repo>
      .Map
    </repo>
    <state>
      .Map
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      .Map
    </pub>
    <sig>
      ( assert true )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      .
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      send _1 ; funds := ! funds - _1 ; assert not ( ! funds < 0 ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      send _1 ~> #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      send _3 ; funds := ! funds - _3 ; assert not ( ! funds < 0 ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _3 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      send _3 ~> #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _3 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _3 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      send _7 ; funds := ! funds - _7 ; assert not ( ! funds < 0 ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      1
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      send _7 ~> #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _7 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      1
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      send _9 ; funds := ! funds - _9 ; assert not ( ! funds < 0 ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _7 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _9 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      send _9 ~> #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _9 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( )
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _7 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _9 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      withdraw _1
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      withdraw _3
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _3 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      withdraw _7
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      1
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      withdraw _9
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _7 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _9 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      withdraw opp_val int
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      1
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      withdraw opp_val int
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      2
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      withdraw opp_val int
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      withdraw opp_val int
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _7 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      {| () |}
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      _10 |-> _4 - _7
      _12 |-> _10 < 0
      _13 |-> not _12
      funds |-> _10
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _8 Int ) ( declare-const _10 Int ) ( assert ( = _10 ( - _4 _7 ) ) ) ( declare-const _12 Int ) ( assert ( = _12 ( ite ( < _10 0 ) 1 0 ) ) ) ( declare-const _13 Int ) ( assert ( = _13 ( ite ( = _12 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) ) ( assert ( not ( = _13 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      {| () |}
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      {| send _1 ; funds := ! funds - _1 ; assert not ( ! funds < 0 ) |}
    </k>
    <eval>
      1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      {| send _3 ; funds := ! funds - _3 ; assert not ( ! funds < 0 ) |}
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _1 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 1 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      funds |-> 100
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _3 Int )
    </sig>
    <pc>
      ( assert true )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      {| send _7 ; funds := ! funds - _7 ; assert not ( ! funds < 0 ) |}
    </k>
    <eval>
      0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      1
    </kbound>
    <lbound>
      1
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw
    </trace>
  </T>
#Or
  Result ==K <T>
    <k>
      {| send _9 ; funds := ! funds - _9 ; assert not ( ! funds < 0 ) |}
    </k>
    <eval>
      1 ~> withdraw ~> send ~> ( Context ( #freezer_;__HOLIB-SYNTAX1_ ( funds := ! funds - _7 ; assert not ( ! funds < 0 ) ) ~> #freezer{|_|}_HOLIB0_ ( ) ) ) ~> 0 ~> withdraw
    </eval>
    <repo>
      withdraw |-> fun ( m : int ) : ( unit ) -> ( send m ; funds := ! funds - m ; assert not ( ! funds < 0 ) )
    </repo>
    <state>
      _4 |-> 100 - _1
      _5 |-> _4 < 0
      _6 |-> not _5
      funds |-> _4
    </state>
    <abs>
      send |-> int -> unit
    </abs>
    <pub>
      withdraw |-> int -> unit
    </pub>
    <sig>
      ( assert true ) ( declare-const _1 Int ) ( declare-const _2 Int ) ( declare-const _4 Int ) ( assert ( = _4 ( - 100 _1 ) ) ) ( declare-const _5 Int ) ( assert ( = _5 ( ite ( < _4 0 ) 1 0 ) ) ) ( declare-const _6 Int ) ( assert ( = _6 ( ite ( = _5 0 ) 1 0 ) ) ) ( declare-const _7 Int ) ( declare-const _9 Int )
    </sig>
    <pc>
      ( assert true ) ( assert ( not ( = _6 0 ) ) )
    </pc>
    <kbound>
      0
    </kbound>
    <lbound>
      2
    </lbound>
    <kzero>
      2
    </kzero>
    <lzero>
      2
    </lzero>
    <trace>
      call withdraw ~> call send ~> ret send ~> ret withdraw ~> call withdraw ~> call send ~> call withdraw
    </trace>
  </T>
